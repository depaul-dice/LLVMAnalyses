digraph "CFG for 'unbin' function" {
	label="CFG for 'unbin' function";

	Node0x162e4a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = getelementptr inbounds %struct.chunk, %struct.chunk* %0, i64 0, i32 3\l  %4 = load %struct.chunk*, %struct.chunk** %3, align 8, !tbaa !1086\l  %5 = getelementptr inbounds %struct.chunk, %struct.chunk* %0, i64 0, i32 2\l  %6 = load %struct.chunk*, %struct.chunk** %5, align 8, !tbaa !1092\l  %7 = icmp eq %struct.chunk* %4, %6\l  br i1 %7, label %10, label %8\l|{<s0>T|<s1>F}}"];
	Node0x162e4a0:s0 -> Node0x162f6f0;
	Node0x162e4a0:s1 -> Node0x162f6a0;
	Node0x162f6a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e8765c70",label="{%8:\l8:                                                \l  %9 = ptrtoint %struct.chunk* %6 to i64\l  br label %18\l}"];
	Node0x162f6a0 -> Node0x162f740;
	Node0x162f6f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%10:\l10:                                               \l  %11 = zext i32 %1 to i64\l  %12 = shl nuw i64 1, %11\l  %13 = xor i64 %12, -1\l  %14 = getelementptr inbounds %struct.anon.129, %struct.anon.129* @mal, i64\l... 0, i32 0\l  tail call void asm sideeffect \"lock \l  %15 = bitcast %struct.chunk** %5 to i64*\l  %16 = load i64, i64* %15, align 8, !tbaa !1092\l  %17 = load %struct.chunk*, %struct.chunk** %3, align 8, !tbaa !1086\l  br label %18\l}"];
	Node0x162f6f0 -> Node0x162f740;
	Node0x162f740 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%18:\l18:                                               \l  %19 = phi %struct.chunk* [ %17, %10 ], [ %4, %8 ]\l  %20 = phi i64 [ %16, %10 ], [ %9, %8 ]\l  %21 = ptrtoint %struct.chunk* %19 to i64\l  %22 = getelementptr inbounds %struct.chunk, %struct.chunk* %19, i64 0, i32 2\l  %23 = bitcast %struct.chunk** %22 to i64*\l  store i64 %20, i64* %23, align 8, !tbaa !1092\l  %24 = load %struct.chunk*, %struct.chunk** %5, align 8, !tbaa !1092\l  %25 = getelementptr inbounds %struct.chunk, %struct.chunk* %24, i64 0, i32 3\l  %26 = bitcast %struct.chunk** %25 to i64*\l  store i64 %21, i64* %26, align 8, !tbaa !1086\l  %27 = getelementptr inbounds %struct.chunk, %struct.chunk* %0, i64 0, i32 1\l  %28 = load i64, i64* %27, align 8, !tbaa !1094\l  %29 = or i64 %28, 1\l  store i64 %29, i64* %27, align 8, !tbaa !1094\l  %30 = bitcast %struct.chunk* %0 to i8*\l  %31 = and i64 %28, -2\l  %32 = getelementptr inbounds i8, i8* %30, i64 %31\l  %33 = bitcast i8* %32 to i64*\l  %34 = load i64, i64* %33, align 8, !tbaa !1095\l  %35 = or i64 %34, 1\l  store i64 %35, i64* %33, align 8, !tbaa !1095\l  ret void\l}"];
}
