digraph "CFG for 'unbin' function" {
	label="CFG for 'unbin' function";

	Node0x22f7700 [shape=record,label="{%2:\l  %3 = getelementptr inbounds %struct.chunk, %struct.chunk* %0, i64 0, i32 3\l  %4 = load %struct.chunk*, %struct.chunk** %3, align 8, !tbaa !73\l  %5 = getelementptr inbounds %struct.chunk, %struct.chunk* %0, i64 0, i32 2\l  %6 = load %struct.chunk*, %struct.chunk** %5, align 8, !tbaa !79\l  %7 = icmp eq %struct.chunk* %4, %6\l  br i1 %7, label %10, label %8\l|{<s0>T|<s1>F}}"];
	Node0x22f7700:s0 -> Node0x22f85d0;
	Node0x22f7700:s1 -> Node0x22f7750;
	Node0x22f7750 [shape=record,label="{%8:\l8:                                                \l  %9 = ptrtoint %struct.chunk* %6 to i64\l  br label %17\l}"];
	Node0x22f7750 -> Node0x22f8620;
	Node0x22f85d0 [shape=record,label="{%10:\l10:                                               \l  %11 = zext i32 %1 to i64\l  %12 = shl nuw i64 1, %11\l  %13 = xor i64 %12, -1\l  tail call void asm sideeffect \"lock \l  %14 = bitcast %struct.chunk** %5 to i64*\l  %15 = load i64, i64* %14, align 8, !tbaa !79\l  %16 = load %struct.chunk*, %struct.chunk** %3, align 8, !tbaa !73\l  br label %17\l}"];
	Node0x22f85d0 -> Node0x22f8620;
	Node0x22f8620 [shape=record,label="{%17:\l17:                                               \l  %18 = phi %struct.chunk* [ %16, %10 ], [ %4, %8 ]\l  %19 = phi i64 [ %15, %10 ], [ %9, %8 ]\l  %20 = ptrtoint %struct.chunk* %18 to i64\l  %21 = getelementptr inbounds %struct.chunk, %struct.chunk* %18, i64 0, i32 2\l  %22 = bitcast %struct.chunk** %21 to i64*\l  store i64 %19, i64* %22, align 8, !tbaa !79\l  %23 = load %struct.chunk*, %struct.chunk** %5, align 8, !tbaa !79\l  %24 = getelementptr inbounds %struct.chunk, %struct.chunk* %23, i64 0, i32 3\l  %25 = bitcast %struct.chunk** %24 to i64*\l  store i64 %20, i64* %25, align 8, !tbaa !73\l  %26 = getelementptr inbounds %struct.chunk, %struct.chunk* %0, i64 0, i32 1\l  %27 = load i64, i64* %26, align 8, !tbaa !81\l  %28 = or i64 %27, 1\l  store i64 %28, i64* %26, align 8, !tbaa !81\l  %29 = bitcast %struct.chunk* %0 to i8*\l  %30 = and i64 %27, -2\l  %31 = getelementptr inbounds i8, i8* %29, i64 %30\l  %32 = bitcast i8* %31 to i64*\l  %33 = load i64, i64* %32, align 8, !tbaa !82\l  %34 = or i64 %33, 1\l  store i64 %34, i64* %32, align 8, !tbaa !82\l  ret void\l}"];
}
