digraph "CFG for 'expf' function" {
	label="CFG for 'expf' function";

	Node0x1a17d60 [shape=record,label="{%1:\l  %2 = tail call double @llvm.experimental.constrained.fpext.f64.f32(float %0,\l... metadata !\"fpexcept.ignore\") #40\l  %3 = bitcast float %0 to i32\l  %4 = lshr i32 %3, 20\l  %5 = and i32 %4, 2047\l  %6 = icmp ult i32 %5, 1067\l  br i1 %6, label %21, label %7, !prof !1632, !misexpect !1633\l|{<s0>T|<s1>F}}"];
	Node0x1a17d60:s0 -> Node0x1a17fe0[label="W:2000"];
	Node0x1a17d60:s1 -> Node0x1a17db0[label="W:1"];
	Node0x1a17db0 [shape=record,label="{%7:\l7:                                                \l  %8 = icmp eq i32 %3, -8388608\l  br i1 %8, label %48, label %9\l|{<s0>T|<s1>F}}"];
	Node0x1a17db0:s0 -> Node0x1a18030;
	Node0x1a17db0:s1 -> Node0x1a17e00;
	Node0x1a17e00 [shape=record,label="{%9:\l9:                                                \l  %10 = icmp ult i32 %5, 2040\l  br i1 %10, label %13, label %11\l|{<s0>T|<s1>F}}"];
	Node0x1a17e00:s0 -> Node0x1a17ea0;
	Node0x1a17e00:s1 -> Node0x1a17e50;
	Node0x1a17e50 [shape=record,label="{%11:\l11:                                               \l  %12 = tail call float @llvm.experimental.constrained.fadd.f32(float %0,\l... float %0, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  br label %48\l}"];
	Node0x1a17e50 -> Node0x1a18030;
	Node0x1a17ea0 [shape=record,label="{%13:\l13:                                               \l  %14 = tail call i1 @llvm.experimental.constrained.fcmps.f32(float %0, float\l... 0x40562E42E0000000, metadata !\"ogt\", metadata !\"fpexcept.ignore\") #40\l  br i1 %14, label %15, label %17\l|{<s0>T|<s1>F}}"];
	Node0x1a17ea0:s0 -> Node0x1a17ef0;
	Node0x1a17ea0:s1 -> Node0x1a17f40;
	Node0x1a17ef0 [shape=record,label="{%15:\l15:                                               \l  %16 = tail call float @__math_oflowf(i32 0) #41\l  br label %48\l}"];
	Node0x1a17ef0 -> Node0x1a18030;
	Node0x1a17f40 [shape=record,label="{%17:\l17:                                               \l  %18 = tail call i1 @llvm.experimental.constrained.fcmps.f32(float %0, float\l... 0xC059FE3680000000, metadata !\"olt\", metadata !\"fpexcept.ignore\") #40\l  br i1 %18, label %19, label %21\l|{<s0>T|<s1>F}}"];
	Node0x1a17f40:s0 -> Node0x1a17f90;
	Node0x1a17f40:s1 -> Node0x1a17fe0;
	Node0x1a17f90 [shape=record,label="{%19:\l19:                                               \l  %20 = tail call float @__math_uflowf(i32 0) #41\l  br label %48\l}"];
	Node0x1a17f90 -> Node0x1a18030;
	Node0x1a17fe0 [shape=record,label="{%21:\l21:                                               \l  %22 = load double, double* getelementptr inbounds (%struct.exp2f_data,\l... %struct.exp2f_data* @__exp2f_data, i64 0, i32 4), align 8, !tbaa !1634\l  %23 = tail call double @llvm.experimental.constrained.fmul.f64(double %22,\l... double %2, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %24 = load double, double* getelementptr inbounds (%struct.exp2f_data,\l... %struct.exp2f_data* @__exp2f_data, i64 0, i32 3), align 8, !tbaa !1639\l  %25 = tail call double @llvm.experimental.constrained.fadd.f64(double %23,\l... double %24, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %26 = bitcast double %25 to i64\l  %27 = tail call double @llvm.experimental.constrained.fsub.f64(double %25,\l... double %24, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %28 = tail call double @llvm.experimental.constrained.fsub.f64(double %23,\l... double %27, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %29 = and i64 %26, 31\l  %30 = getelementptr inbounds %struct.exp2f_data, %struct.exp2f_data*\l... @__exp2f_data, i64 0, i32 0, i64 %29\l  %31 = load i64, i64* %30, align 8, !tbaa !1640\l  %32 = shl i64 %26, 47\l  %33 = add i64 %31, %32\l  %34 = bitcast i64 %33 to double\l  %35 = load double, double* getelementptr inbounds (%struct.exp2f_data,\l... %struct.exp2f_data* @__exp2f_data, i64 0, i32 5, i64 0), align 8, !tbaa !1642\l  %36 = tail call double @llvm.experimental.constrained.fmul.f64(double %35,\l... double %28, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %37 = load double, double* getelementptr inbounds (%struct.exp2f_data,\l... %struct.exp2f_data* @__exp2f_data, i64 0, i32 5, i64 1), align 8, !tbaa !1642\l  %38 = tail call double @llvm.experimental.constrained.fadd.f64(double %36,\l... double %37, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %39 = tail call double @llvm.experimental.constrained.fmul.f64(double %28,\l... double %28, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %40 = load double, double* getelementptr inbounds (%struct.exp2f_data,\l... %struct.exp2f_data* @__exp2f_data, i64 0, i32 5, i64 2), align 8, !tbaa !1642\l  %41 = tail call double @llvm.experimental.constrained.fmul.f64(double %40,\l... double %28, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %42 = tail call double @llvm.experimental.constrained.sitofp.f64.i32(i32 1,\l... metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %43 = tail call double @llvm.experimental.constrained.fadd.f64(double %41,\l... double %42, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %44 = tail call double @llvm.experimental.constrained.fmul.f64(double %38,\l... double %39, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %45 = tail call double @llvm.experimental.constrained.fadd.f64(double %44,\l... double %43, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %46 = tail call double @llvm.experimental.constrained.fmul.f64(double %45,\l... double %34, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %47 = tail call float @llvm.experimental.constrained.fptrunc.f32.f64(double\l... %46, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  br label %48\l}"];
	Node0x1a17fe0 -> Node0x1a18030;
	Node0x1a18030 [shape=record,label="{%48:\l48:                                               \l  %49 = phi float [ %12, %11 ], [ %16, %15 ], [ %20, %19 ], [ %47, %21 ], [\l... 0.000000e+00, %7 ]\l  ret float %49\l}"];
}
