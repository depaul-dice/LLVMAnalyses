digraph "CFG for 'casinl' function" {
	label="CFG for 'casinl' function";

	Node0x16bdfd0 [shape=record,label="{%1:\l  %2 = alloca \{ x86_fp80, x86_fp80 \}, align 16\l  %3 = alloca \{ x86_fp80, x86_fp80 \}, align 16\l  %4 = getelementptr inbounds \{ x86_fp80, x86_fp80 \}, \{ x86_fp80, x86_fp80 \}*\l... %0, i64 0, i32 0\l  %5 = load x86_fp80, x86_fp80* %4, align 16\l  %6 = getelementptr inbounds \{ x86_fp80, x86_fp80 \}, \{ x86_fp80, x86_fp80 \}*\l... %0, i64 0, i32 1\l  %7 = load x86_fp80, x86_fp80* %6, align 16\l  %8 = tail call x86_fp80 @llvm.experimental.constrained.fpext.f80.f64(double\l... 1.000000e+00, metadata !\"fpexcept.ignore\") #40\l  %9 = tail call x86_fp80 @llvm.experimental.constrained.fsub.f80(x86_fp80 %5,\l... x86_fp80 %7, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %10 = tail call x86_fp80 @llvm.experimental.constrained.fadd.f80(x86_fp80\l... %5, x86_fp80 %7, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %11 = tail call x86_fp80 @llvm.experimental.constrained.fmul.f80(x86_fp80\l... %9, x86_fp80 %10, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %12 = tail call x86_fp80 @llvm.experimental.constrained.fsub.f80(x86_fp80\l... %8, x86_fp80 %11, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %13 = tail call x86_fp80 @llvm.experimental.constrained.fpext.f80.f64(double\l... -2.000000e+00, metadata !\"fpexcept.ignore\") #40\l  %14 = tail call x86_fp80 @llvm.experimental.constrained.fmul.f80(x86_fp80\l... %13, x86_fp80 %5, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %15 = tail call x86_fp80 @llvm.experimental.constrained.fmul.f80(x86_fp80\l... %14, x86_fp80 %7, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %16 = fneg x86_fp80 %7\l  %17 = getelementptr inbounds \{ x86_fp80, x86_fp80 \}, \{ x86_fp80, x86_fp80 \}*\l... %2, i64 0, i32 0\l  %18 = getelementptr inbounds \{ x86_fp80, x86_fp80 \}, \{ x86_fp80, x86_fp80 \}*\l... %2, i64 0, i32 1\l  store x86_fp80 %12, x86_fp80* %17, align 16\l  store x86_fp80 %15, x86_fp80* %18, align 16\l  %19 = tail call \{ x86_fp80, x86_fp80 \} @csqrtl(\{ x86_fp80, x86_fp80 \}*\l... nonnull byval(\{ x86_fp80, x86_fp80 \}) align 16 %2) #41\l  %20 = extractvalue \{ x86_fp80, x86_fp80 \} %19, 0\l  %21 = extractvalue \{ x86_fp80, x86_fp80 \} %19, 1\l  %22 = tail call x86_fp80 @llvm.experimental.constrained.fadd.f80(x86_fp80\l... %16, x86_fp80 %20, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %23 = tail call x86_fp80 @llvm.experimental.constrained.fadd.f80(x86_fp80\l... %5, x86_fp80 %21, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %24 = getelementptr inbounds \{ x86_fp80, x86_fp80 \}, \{ x86_fp80, x86_fp80 \}*\l... %3, i64 0, i32 0\l  %25 = getelementptr inbounds \{ x86_fp80, x86_fp80 \}, \{ x86_fp80, x86_fp80 \}*\l... %3, i64 0, i32 1\l  store x86_fp80 %22, x86_fp80* %24, align 16\l  store x86_fp80 %23, x86_fp80* %25, align 16\l  %26 = tail call \{ x86_fp80, x86_fp80 \} @clogl(\{ x86_fp80, x86_fp80 \}*\l... nonnull byval(\{ x86_fp80, x86_fp80 \}) align 16 %3) #41\l  %27 = extractvalue \{ x86_fp80, x86_fp80 \} %26, 0\l  %28 = extractvalue \{ x86_fp80, x86_fp80 \} %26, 1\l  %29 = fneg x86_fp80 %27\l  %30 = insertvalue \{ x86_fp80, x86_fp80 \} undef, x86_fp80 %28, 0\l  %31 = insertvalue \{ x86_fp80, x86_fp80 \} %30, x86_fp80 %29, 1\l  ret \{ x86_fp80, x86_fp80 \} %31\l}"];
}
