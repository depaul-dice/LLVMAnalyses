digraph "CFG for 'fclose' function" {
	label="CFG for 'fclose' function";

	Node0x251cb20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1:\l  %2 = getelementptr inbounds %struct._IO_FILE.3, %struct._IO_FILE.3* %0, i64\l... 0, i32 19\l  %3 = load volatile i32, i32* %2, align 4, !tbaa !792\l  %4 = icmp sgt i32 %3, -1\l  br i1 %4, label %5, label %if.true.direct_targ\l|{<s0>T|<s1>F}}"];
	Node0x251cb20:s0 -> Node0x251d390;
	Node0x251cb20:s1 -> Node0x251e7d0;
	Node0x251d390 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e1675170",label="{%5:\l5:                                                \l  %6 = bitcast %struct._IO_FILE.3* %0 to %struct._IO_FILE.699*\l  %7 = tail call i32 @__lockfile(%struct._IO_FILE.699* nonnull %6) #27\l  %8 = icmp ne i32 %7, 0\l  br label %if.true.direct_targ\l}"];
	Node0x251d390 -> Node0x251e7d0;
	Node0x251e7d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{if.true.direct_targ:                              \l  %9 = phi i1 [ %8, %5 ], [ false, %1 ]\l  %10 = tail call i32 @fflush(%struct._IO_FILE.3* nonnull %0) #27\l  %11 = getelementptr inbounds %struct._IO_FILE.3, %struct._IO_FILE.3* %0, i64\l... 0, i32 3\l  %12 = load i32 (%struct._IO_FILE.3*)*, i32 (%struct._IO_FILE.3*)** %11,\l... align 8, !tbaa !799\l  %13 = bitcast i32 (%struct._IO_FILE.706*)* @__stdio_close to i32\l... (%struct._IO_FILE.3*)*\l  %14 = icmp eq i32 (%struct._IO_FILE.3*)* %12, %13\l  call void @llvm.assume(i1 %14)\l  %15 = bitcast %struct._IO_FILE.3* %0 to %struct._IO_FILE.706*\l  %16 = tail call i32 @__stdio_close(%struct._IO_FILE.706* nonnull %15) #28\l  br i1 %9, label %17, label %19\l|{<s0>T|<s1>F}}"];
	Node0x251e7d0:s0 -> Node0x251e820;
	Node0x251e7d0:s1 -> Node0x251e870;
	Node0x251e820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%17:\l17:                                               \l  %18 = bitcast %struct._IO_FILE.3* %0 to %struct._IO_FILE.699*\l  tail call void @__unlockfile(%struct._IO_FILE.699* nonnull %18) #27\l  br label %19\l}"];
	Node0x251e820 -> Node0x251e870;
	Node0x251e870 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%19:\l19:                                               \l  %20 = getelementptr inbounds %struct._IO_FILE.3, %struct._IO_FILE.3* %0, i64\l... 0, i32 0\l  %21 = load i32, i32* %20, align 8, !tbaa !800\l  %22 = and i32 %21, 1\l  %23 = icmp eq i32 %22, 0\l  br i1 %23, label %24, label %53\l|{<s0>T|<s1>F}}"];
	Node0x251e870:s0 -> Node0x251e8c0;
	Node0x251e870:s1 -> Node0x251eaf0;
	Node0x251e8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%24:\l24:                                               \l  tail call fastcc void @__unlist_locked_file(%struct._IO_FILE.3* nonnull %0)\l... #27\l  %25 = tail call fastcc %struct._IO_FILE.3** @__ofl_lock() #27\l  %26 = getelementptr inbounds %struct._IO_FILE.3, %struct._IO_FILE.3* %0, i64\l... 0, i32 13\l  %27 = load %struct._IO_FILE.3*, %struct._IO_FILE.3** %26, align 8, !tbaa !801\l  %28 = icmp eq %struct._IO_FILE.3* %27, null\l  %29 = ptrtoint %struct._IO_FILE.3* %27 to i64\l  br i1 %28, label %36, label %30\l|{<s0>T|<s1>F}}"];
	Node0x251e8c0:s0 -> Node0x251e960;
	Node0x251e8c0:s1 -> Node0x251e910;
	Node0x251e910 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%30:\l30:                                               \l  %31 = getelementptr inbounds %struct._IO_FILE.3, %struct._IO_FILE.3* %0, i64\l... 0, i32 14\l  %32 = bitcast %struct._IO_FILE.3** %31 to i64*\l  %33 = load i64, i64* %32, align 8, !tbaa !802\l  %34 = getelementptr inbounds %struct._IO_FILE.3, %struct._IO_FILE.3* %27,\l... i64 0, i32 14\l  %35 = bitcast %struct._IO_FILE.3** %34 to i64*\l  store i64 %33, i64* %35, align 8, !tbaa !802\l  br label %36\l}"];
	Node0x251e910 -> Node0x251e960;
	Node0x251e960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%36:\l36:                                               \l  %37 = getelementptr inbounds %struct._IO_FILE.3, %struct._IO_FILE.3* %0, i64\l... 0, i32 14\l  %38 = load %struct._IO_FILE.3*, %struct._IO_FILE.3** %37, align 8, !tbaa !802\l  %39 = icmp eq %struct._IO_FILE.3* %38, null\l  %40 = ptrtoint %struct._IO_FILE.3* %38 to i64\l  br i1 %39, label %44, label %41\l|{<s0>T|<s1>F}}"];
	Node0x251e960:s0 -> Node0x251ea00;
	Node0x251e960:s1 -> Node0x251e9b0;
	Node0x251e9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%41:\l41:                                               \l  %42 = getelementptr inbounds %struct._IO_FILE.3, %struct._IO_FILE.3* %38,\l... i64 0, i32 13\l  %43 = bitcast %struct._IO_FILE.3** %42 to i64*\l  store i64 %29, i64* %43, align 8, !tbaa !801\l  br label %44\l}"];
	Node0x251e9b0 -> Node0x251ea00;
	Node0x251ea00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%44:\l44:                                               \l  %45 = load %struct._IO_FILE.3*, %struct._IO_FILE.3** %25, align 8, !tbaa !803\l  %46 = icmp eq %struct._IO_FILE.3* %45, %0\l  br i1 %46, label %47, label %49\l|{<s0>T|<s1>F}}"];
	Node0x251ea00:s0 -> Node0x251ea50;
	Node0x251ea00:s1 -> Node0x251eaa0;
	Node0x251ea50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%47:\l47:                                               \l  %48 = bitcast %struct._IO_FILE.3** %25 to i64*\l  store i64 %40, i64* %48, align 8, !tbaa !803\l  br label %49\l}"];
	Node0x251ea50 -> Node0x251eaa0;
	Node0x251eaa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%49:\l49:                                               \l  tail call fastcc void @__ofl_unlock() #27\l  %50 = getelementptr inbounds %struct._IO_FILE.3, %struct._IO_FILE.3* %0, i64\l... 0, i32 23\l  %51 = load i8*, i8** %50, align 8, !tbaa !804\l  tail call fastcc void @free(i8* %51) #27\l  %52 = bitcast %struct._IO_FILE.3* %0 to i8*\l  tail call fastcc void @free(i8* %52) #27\l  br label %53\l}"];
	Node0x251eaa0 -> Node0x251eaf0;
	Node0x251eaf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%53:\l53:                                               \l  %54 = or i32 %16, %10\l  ret i32 %54\l}"];
}
