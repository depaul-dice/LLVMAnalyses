digraph "CFG for 'remquo' function" {
	label="CFG for 'remquo' function";

	Node0x1d55a90 [shape=record,label="{%3:\l  %4 = bitcast double %0 to i64\l  %5 = bitcast double %1 to i64\l  %6 = lshr i64 %4, 52\l  %7 = trunc i64 %6 to i32\l  %8 = and i32 %7, 2047\l  %9 = lshr i64 %5, 52\l  %10 = trunc i64 %9 to i32\l  %11 = and i32 %10, 2047\l  store i32 0, i32* %2, align 4, !tbaa !1632\l  %12 = and i64 %5, 9223372036854775807\l  %13 = icmp eq i64 %12, 0\l  br i1 %13, label %18, label %14\l|{<s0>T|<s1>F}}"];
	Node0x1d55a90:s0 -> Node0x1d56020;
	Node0x1d55a90:s1 -> Node0x1d55fd0;
	Node0x1d55fd0 [shape=record,label="{%14:\l14:                                               \l  %15 = icmp ugt i64 %12, 9218868437227405312\l  %16 = icmp eq i32 %8, 2047\l  %17 = or i1 %15, %16\l  br i1 %17, label %18, label %22\l|{<s0>T|<s1>F}}"];
	Node0x1d55fd0:s0 -> Node0x1d56020;
	Node0x1d55fd0:s1 -> Node0x1d56070;
	Node0x1d56020 [shape=record,label="{%18:\l18:                                               \l  %19 = tail call double @llvm.experimental.constrained.fmul.f64(double %0,\l... double %1, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %20 = tail call double @llvm.experimental.constrained.fmul.f64(double %0,\l... double %1, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %21 = tail call double @llvm.experimental.constrained.fdiv.f64(double %19,\l... double %20, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  br label %163\l}"];
	Node0x1d56020 -> Node0x1d568e0;
	Node0x1d56070 [shape=record,label="{%22:\l22:                                               \l  %23 = and i64 %4, 9223372036854775807\l  %24 = icmp eq i64 %23, 0\l  br i1 %24, label %163, label %25\l|{<s0>T|<s1>F}}"];
	Node0x1d56070:s0 -> Node0x1d568e0;
	Node0x1d56070:s1 -> Node0x1d560c0;
	Node0x1d560c0 [shape=record,label="{%25:\l25:                                               \l  %26 = icmp eq i32 %8, 0\l  br i1 %26, label %27, label %41\l|{<s0>T|<s1>F}}"];
	Node0x1d560c0:s0 -> Node0x1d56110;
	Node0x1d560c0:s1 -> Node0x1d56200;
	Node0x1d56110 [shape=record,label="{%27:\l27:                                               \l  %28 = shl i64 %4, 12\l  %29 = icmp sgt i64 %28, -1\l  br i1 %29, label %30, label %36\l|{<s0>T|<s1>F}}"];
	Node0x1d56110:s0 -> Node0x1d56160;
	Node0x1d56110:s1 -> Node0x1d561b0;
	Node0x1d56160 [shape=record,label="{%30:\l30:                                               \l  %31 = phi i64 [ %34, %30 ], [ %28, %27 ]\l  %32 = phi i32 [ %33, %30 ], [ 0, %27 ]\l  %33 = add nsw i32 %32, -1\l  %34 = shl nuw i64 %31, 1\l  %35 = icmp sgt i64 %34, -1\l  br i1 %35, label %30, label %36\l|{<s0>T|<s1>F}}"];
	Node0x1d56160:s0 -> Node0x1d56160;
	Node0x1d56160:s1 -> Node0x1d561b0;
	Node0x1d561b0 [shape=record,label="{%36:\l36:                                               \l  %37 = phi i32 [ 0, %27 ], [ %33, %30 ]\l  %38 = sub i32 1, %37\l  %39 = zext i32 %38 to i64\l  %40 = shl i64 %4, %39\l  br label %44\l}"];
	Node0x1d561b0 -> Node0x1d56250;
	Node0x1d56200 [shape=record,label="{%41:\l41:                                               \l  %42 = and i64 %4, 4503599627370495\l  %43 = or i64 %42, 4503599627370496\l  br label %44\l}"];
	Node0x1d56200 -> Node0x1d56250;
	Node0x1d56250 [shape=record,label="{%44:\l44:                                               \l  %45 = phi i32 [ %8, %41 ], [ %37, %36 ]\l  %46 = phi i64 [ %43, %41 ], [ %40, %36 ]\l  %47 = icmp eq i32 %11, 0\l  br i1 %47, label %48, label %62\l|{<s0>T|<s1>F}}"];
	Node0x1d56250:s0 -> Node0x1d562a0;
	Node0x1d56250:s1 -> Node0x1d56390;
	Node0x1d562a0 [shape=record,label="{%48:\l48:                                               \l  %49 = shl i64 %5, 12\l  %50 = icmp sgt i64 %49, -1\l  br i1 %50, label %51, label %57\l|{<s0>T|<s1>F}}"];
	Node0x1d562a0:s0 -> Node0x1d562f0;
	Node0x1d562a0:s1 -> Node0x1d56340;
	Node0x1d562f0 [shape=record,label="{%51:\l51:                                               \l  %52 = phi i64 [ %55, %51 ], [ %49, %48 ]\l  %53 = phi i32 [ %54, %51 ], [ 0, %48 ]\l  %54 = add nsw i32 %53, -1\l  %55 = shl nuw i64 %52, 1\l  %56 = icmp sgt i64 %55, -1\l  br i1 %56, label %51, label %57\l|{<s0>T|<s1>F}}"];
	Node0x1d562f0:s0 -> Node0x1d562f0;
	Node0x1d562f0:s1 -> Node0x1d56340;
	Node0x1d56340 [shape=record,label="{%57:\l57:                                               \l  %58 = phi i32 [ 0, %48 ], [ %54, %51 ]\l  %59 = sub i32 1, %58\l  %60 = zext i32 %59 to i64\l  %61 = shl i64 %5, %60\l  br label %65\l}"];
	Node0x1d56340 -> Node0x1d563e0;
	Node0x1d56390 [shape=record,label="{%62:\l62:                                               \l  %63 = and i64 %5, 4503599627370495\l  %64 = or i64 %63, 4503599627370496\l  br label %65\l}"];
	Node0x1d56390 -> Node0x1d563e0;
	Node0x1d563e0 [shape=record,label="{%65:\l65:                                               \l  %66 = phi i64 [ %64, %62 ], [ %61, %57 ]\l  %67 = phi i32 [ %11, %62 ], [ %58, %57 ]\l  %68 = icmp slt i32 %45, %67\l  br i1 %68, label %77, label %69\l|{<s0>T|<s1>F}}"];
	Node0x1d563e0:s0 -> Node0x1d56480;
	Node0x1d563e0:s1 -> Node0x1d56430;
	Node0x1d56430 [shape=record,label="{%69:\l69:                                               \l  %70 = icmp sgt i32 %45, %67\l  %71 = sub i64 %46, %66\l  %72 = icmp sgt i64 %71, -1\l  %73 = lshr i64 %71, 63\l  %74 = trunc i64 %73 to i32\l  %75 = xor i32 %74, 1\l  %76 = select i1 %72, i64 %71, i64 %46\l  br i1 %70, label %80, label %95\l|{<s0>T|<s1>F}}"];
	Node0x1d56430:s0 -> Node0x1d564d0;
	Node0x1d56430:s1 -> Node0x1d56520;
	Node0x1d56480 [shape=record,label="{%77:\l77:                                               \l  %78 = add nsw i32 %45, 1\l  %79 = icmp eq i32 %78, %67\l  br i1 %79, label %108, label %163\l|{<s0>T|<s1>F}}"];
	Node0x1d56480:s0 -> Node0x1d56610;
	Node0x1d56480:s1 -> Node0x1d568e0;
	Node0x1d564d0 [shape=record,label="{%80:\l80:                                               \l  %81 = phi i64 [ %94, %80 ], [ %76, %69 ]\l  %82 = phi i32 [ %93, %80 ], [ %75, %69 ]\l  %83 = phi i32 [ %86, %80 ], [ %45, %69 ]\l  %84 = shl i64 %81, 1\l  %85 = shl i32 %82, 1\l  %86 = add nsw i32 %83, -1\l  %87 = icmp sgt i32 %86, %67\l  %88 = sub i64 %84, %66\l  %89 = icmp sgt i64 %88, -1\l  %90 = lshr i64 %88, 63\l  %91 = trunc i64 %90 to i32\l  %92 = or i32 %85, %91\l  %93 = xor i32 %92, 1\l  %94 = select i1 %89, i64 %88, i64 %84\l  br i1 %87, label %80, label %95\l|{<s0>T|<s1>F}}"];
	Node0x1d564d0:s0 -> Node0x1d564d0;
	Node0x1d564d0:s1 -> Node0x1d56520;
	Node0x1d56520 [shape=record,label="{%95:\l95:                                               \l  %96 = phi i32 [ %45, %69 ], [ %67, %80 ]\l  %97 = phi i32 [ %75, %69 ], [ %93, %80 ]\l  %98 = phi i64 [ %76, %69 ], [ %94, %80 ]\l  %99 = icmp eq i64 %98, 0\l  br i1 %99, label %118, label %100\l|{<s0>T|<s1>F}}"];
	Node0x1d56520:s0 -> Node0x1d566b0;
	Node0x1d56520:s1 -> Node0x1d56570;
	Node0x1d56570 [shape=record,label="{%100:\l100:                                              \l  %101 = icmp ult i64 %98, 4503599627370496\l  br i1 %101, label %102, label %108\l|{<s0>T|<s1>F}}"];
	Node0x1d56570:s0 -> Node0x1d565c0;
	Node0x1d56570:s1 -> Node0x1d56610;
	Node0x1d565c0 [shape=record,label="{%102:\l102:                                              \l  %103 = phi i64 [ %105, %102 ], [ %98, %100 ]\l  %104 = phi i32 [ %106, %102 ], [ %96, %100 ]\l  %105 = shl nuw nsw i64 %103, 1\l  %106 = add nsw i32 %104, -1\l  %107 = icmp ult i64 %103, 2251799813685248\l  br i1 %107, label %102, label %108\l|{<s0>T|<s1>F}}"];
	Node0x1d565c0:s0 -> Node0x1d565c0;
	Node0x1d565c0:s1 -> Node0x1d56610;
	Node0x1d56610 [shape=record,label="{%108:\l108:                                              \l  %109 = phi i32 [ %45, %77 ], [ %96, %100 ], [ %106, %102 ]\l  %110 = phi i32 [ 0, %77 ], [ %97, %100 ], [ %97, %102 ]\l  %111 = phi i64 [ %46, %77 ], [ %98, %100 ], [ %105, %102 ]\l  %112 = icmp sgt i32 %109, 0\l  br i1 %112, label %113, label %118\l|{<s0>T|<s1>F}}"];
	Node0x1d56610:s0 -> Node0x1d56660;
	Node0x1d56610:s1 -> Node0x1d566b0;
	Node0x1d56660 [shape=record,label="{%113:\l113:                                              \l  %114 = add i64 %111, -4503599627370496\l  %115 = zext i32 %109 to i64\l  %116 = shl i64 %115, 52\l  %117 = or i64 %114, %116\l  br label %125\l}"];
	Node0x1d56660 -> Node0x1d56700;
	Node0x1d566b0 [shape=record,label="{%118:\l118:                                              \l  %119 = phi i64 [ %111, %108 ], [ 0, %95 ]\l  %120 = phi i32 [ %110, %108 ], [ %97, %95 ]\l  %121 = phi i32 [ %109, %108 ], [ -60, %95 ]\l  %122 = sub i32 1, %121\l  %123 = zext i32 %122 to i64\l  %124 = lshr i64 %119, %123\l  br label %125\l}"];
	Node0x1d566b0 -> Node0x1d56700;
	Node0x1d56700 [shape=record,label="{%125:\l125:                                              \l  %126 = phi i32 [ %110, %113 ], [ %120, %118 ]\l  %127 = phi i32 [ %109, %113 ], [ %121, %118 ]\l  %128 = phi i64 [ %117, %113 ], [ %124, %118 ]\l  %129 = bitcast i64 %128 to double\l  %130 = icmp slt i64 %5, 0\l  %131 = fneg double %1\l  %132 = select i1 %130, double %131, double %1\l  %133 = icmp eq i32 %127, %67\l  br i1 %133, label %149, label %134\l|{<s0>T|<s1>F}}"];
	Node0x1d56700:s0 -> Node0x1d56840;
	Node0x1d56700:s1 -> Node0x1d56750;
	Node0x1d56750 [shape=record,label="{%134:\l134:                                              \l  %135 = add nsw i32 %127, 1\l  %136 = icmp eq i32 %135, %67\l  br i1 %136, label %137, label %152\l|{<s0>T|<s1>F}}"];
	Node0x1d56750:s0 -> Node0x1d567a0;
	Node0x1d56750:s1 -> Node0x1d56890;
	Node0x1d567a0 [shape=record,label="{%137:\l137:                                              \l  %138 = tail call double @llvm.experimental.constrained.sitofp.f64.i32(i32 2,\l... metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %139 = tail call double @llvm.experimental.constrained.fmul.f64(double %138,\l... double %129, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %140 = tail call i1 @llvm.experimental.constrained.fcmps.f64(double %139,\l... double %132, metadata !\"ogt\", metadata !\"fpexcept.ignore\") #40\l  br i1 %140, label %149, label %141\l|{<s0>T|<s1>F}}"];
	Node0x1d567a0:s0 -> Node0x1d56840;
	Node0x1d567a0:s1 -> Node0x1d567f0;
	Node0x1d567f0 [shape=record,label="{%141:\l141:                                              \l  %142 = tail call double @llvm.experimental.constrained.sitofp.f64.i32(i32 2,\l... metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %143 = tail call double @llvm.experimental.constrained.fmul.f64(double %142,\l... double %129, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %144 = tail call i1 @llvm.experimental.constrained.fcmp.f64(double %143,\l... double %132, metadata !\"oeq\", metadata !\"fpexcept.ignore\") #40\l  %145 = xor i1 %144, true\l  %146 = and i32 %126, 1\l  %147 = icmp eq i32 %146, 0\l  %148 = or i1 %147, %145\l  br i1 %148, label %152, label %149\l|{<s0>T|<s1>F}}"];
	Node0x1d567f0:s0 -> Node0x1d56890;
	Node0x1d567f0:s1 -> Node0x1d56840;
	Node0x1d56840 [shape=record,label="{%149:\l149:                                              \l  %150 = tail call double @llvm.experimental.constrained.fsub.f64(double %129,\l... double %132, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %151 = add i32 %126, 1\l  br label %152\l}"];
	Node0x1d56840 -> Node0x1d56890;
	Node0x1d56890 [shape=record,label="{%152:\l152:                                              \l  %153 = phi double [ %150, %149 ], [ %129, %141 ], [ %129, %134 ]\l  %154 = phi i32 [ %151, %149 ], [ %126, %141 ], [ %126, %134 ]\l  %155 = and i32 %154, 2147483647\l  %156 = xor i64 %5, %4\l  %157 = icmp sgt i64 %156, -1\l  %158 = sub nsw i32 0, %155\l  %159 = select i1 %157, i32 %155, i32 %158\l  store i32 %159, i32* %2, align 4, !tbaa !1632\l  %160 = icmp slt i64 %4, 0\l  %161 = fneg double %153\l  %162 = select i1 %160, double %161, double %153\l  br label %163\l}"];
	Node0x1d56890 -> Node0x1d568e0;
	Node0x1d568e0 [shape=record,label="{%163:\l163:                                              \l  %164 = phi double [ %21, %18 ], [ %162, %152 ], [ %0, %22 ], [ %0, %77 ]\l  ret double %164\l}"];
}
