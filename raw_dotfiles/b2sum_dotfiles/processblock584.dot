digraph "CFG for 'processblock.584' function" {
	label="CFG for 'processblock.584' function";

	Node0x1e3cd30 [shape=record,label="{%2:\l  %3 = alloca [64 x i32], align 16\l  %4 = bitcast [64 x i32]* %3 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %4) #40\l  br label %5\l}"];
	Node0x1e3cd30 -> Node0x1e3cd80;
	Node0x1e3cd80 [shape=record,label="{%5:\l5:                                                \l  %6 = phi i64 [ 0, %2 ], [ %27, %5 ]\l  %7 = shl nuw nsw i64 %6, 2\l  %8 = getelementptr inbounds i8, i8* %1, i64 %7\l  %9 = bitcast i8* %8 to \<16 x i8\>*\l  %10 = load \<16 x i8\>, \<16 x i8\>* %9, align 1, !tbaa !1632\l  %11 = shufflevector \<16 x i8\> %10, \<16 x i8\> undef, \<4 x i32\> \<i32 0, i32 4,\l... i32 8, i32 12\>\l  %12 = shufflevector \<16 x i8\> %10, \<16 x i8\> undef, \<4 x i32\> \<i32 1, i32 5,\l... i32 9, i32 13\>\l  %13 = shufflevector \<16 x i8\> %10, \<16 x i8\> undef, \<4 x i32\> \<i32 2, i32 6,\l... i32 10, i32 14\>\l  %14 = shufflevector \<16 x i8\> %10, \<16 x i8\> undef, \<4 x i32\> \<i32 3, i32 7,\l... i32 11, i32 15\>\l  %15 = zext \<4 x i8\> %11 to \<4 x i32\>\l  %16 = shl nuw \<4 x i32\> %15, \<i32 24, i32 24, i32 24, i32 24\>\l  %17 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %6\l  %18 = zext \<4 x i8\> %12 to \<4 x i32\>\l  %19 = shl nuw nsw \<4 x i32\> %18, \<i32 16, i32 16, i32 16, i32 16\>\l  %20 = or \<4 x i32\> %19, %16\l  %21 = zext \<4 x i8\> %13 to \<4 x i32\>\l  %22 = shl nuw nsw \<4 x i32\> %21, \<i32 8, i32 8, i32 8, i32 8\>\l  %23 = or \<4 x i32\> %22, %20\l  %24 = zext \<4 x i8\> %14 to \<4 x i32\>\l  %25 = or \<4 x i32\> %23, %24\l  %26 = bitcast i32* %17 to \<4 x i32\>*\l  store \<4 x i32\> %25, \<4 x i32\>* %26, align 16, !tbaa !1635\l  %27 = add i64 %6, 4\l  %28 = icmp eq i64 %27, 16\l  br i1 %28, label %29, label %5, !llvm.loop !1637\l|{<s0>T|<s1>F}}"];
	Node0x1e3cd80:s0 -> Node0x1e3cdd0;
	Node0x1e3cd80:s1 -> Node0x1e3cd80;
	Node0x1e3cdd0 [shape=record,label="{%29:\l29:                                               \l  %30 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 0\l  %31 = load i32, i32* %30, align 16, !tbaa !1635\l  br label %32\l}"];
	Node0x1e3cdd0 -> Node0x1e3ce20;
	Node0x1e3ce20 [shape=record,label="{%32:\l32:                                               \l  %33 = phi i32 [ %31, %29 ], [ %52, %32 ]\l  %34 = phi i64 [ 16, %29 ], [ %66, %32 ]\l  %35 = add nsw i64 %34, -2\l  %36 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %35\l  %37 = load i32, i32* %36, align 4, !tbaa !1635\l  %38 = lshr i32 %37, 17\l  %39 = shl i32 %37, 15\l  %40 = or i32 %39, %38\l  %41 = lshr i32 %37, 19\l  %42 = shl i32 %37, 13\l  %43 = or i32 %42, %41\l  %44 = lshr i32 %37, 10\l  %45 = xor i32 %43, %44\l  %46 = xor i32 %45, %40\l  %47 = add nsw i64 %34, -7\l  %48 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %47\l  %49 = load i32, i32* %48, align 4, !tbaa !1635\l  %50 = add nsw i64 %34, -15\l  %51 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %50\l  %52 = load i32, i32* %51, align 4, !tbaa !1635\l  %53 = lshr i32 %52, 7\l  %54 = shl i32 %52, 25\l  %55 = or i32 %54, %53\l  %56 = lshr i32 %52, 18\l  %57 = shl i32 %52, 14\l  %58 = or i32 %57, %56\l  %59 = lshr i32 %52, 3\l  %60 = xor i32 %58, %59\l  %61 = xor i32 %60, %55\l  %62 = add i32 %33, %49\l  %63 = add i32 %62, %46\l  %64 = add i32 %63, %61\l  %65 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %34\l  store i32 %64, i32* %65, align 4, !tbaa !1635\l  %66 = add nuw nsw i64 %34, 1\l  %67 = icmp eq i64 %66, 64\l  br i1 %67, label %68, label %32\l|{<s0>T|<s1>F}}"];
	Node0x1e3ce20:s0 -> Node0x1e3ce70;
	Node0x1e3ce20:s1 -> Node0x1e3ce20;
	Node0x1e3ce70 [shape=record,label="{%68:\l68:                                               \l  %69 = getelementptr inbounds %struct.sha256, %struct.sha256* %0, i64 0, i32\l... 1, i64 0\l  %70 = bitcast i32* %69 to \<4 x i32\>*\l  %71 = load \<4 x i32\>, \<4 x i32\>* %70, align 8, !tbaa !1635\l  %72 = getelementptr inbounds %struct.sha256, %struct.sha256* %0, i64 0, i32\l... 1, i64 4\l  %73 = bitcast i32* %72 to \<4 x i32\>*\l  %74 = load \<4 x i32\>, \<4 x i32\>* %73, align 8, !tbaa !1635\l  %75 = extractelement \<4 x i32\> %71, i32 0\l  %76 = extractelement \<4 x i32\> %71, i32 1\l  %77 = extractelement \<4 x i32\> %71, i32 2\l  %78 = extractelement \<4 x i32\> %71, i32 3\l  %79 = extractelement \<4 x i32\> %74, i32 0\l  %80 = extractelement \<4 x i32\> %74, i32 1\l  %81 = extractelement \<4 x i32\> %74, i32 2\l  %82 = extractelement \<4 x i32\> %74, i32 3\l  br label %83\l}"];
	Node0x1e3ce70 -> Node0x1e3cec0;
	Node0x1e3cec0 [shape=record,label="{%83:\l83:                                               \l  %84 = phi i64 [ 0, %68 ], [ %133, %83 ]\l  %85 = phi i32 [ %82, %68 ], [ %86, %83 ]\l  %86 = phi i32 [ %81, %68 ], [ %87, %83 ]\l  %87 = phi i32 [ %80, %68 ], [ %88, %83 ]\l  %88 = phi i32 [ %79, %68 ], [ %131, %83 ]\l  %89 = phi i32 [ %78, %68 ], [ %90, %83 ]\l  %90 = phi i32 [ %77, %68 ], [ %91, %83 ]\l  %91 = phi i32 [ %76, %68 ], [ %92, %83 ]\l  %92 = phi i32 [ %75, %68 ], [ %132, %83 ]\l  %93 = lshr i32 %88, 6\l  %94 = shl i32 %88, 26\l  %95 = or i32 %94, %93\l  %96 = lshr i32 %88, 11\l  %97 = shl i32 %88, 21\l  %98 = or i32 %97, %96\l  %99 = xor i32 %95, %98\l  %100 = lshr i32 %88, 25\l  %101 = shl i32 %88, 7\l  %102 = or i32 %101, %100\l  %103 = xor i32 %99, %102\l  %104 = add i32 %103, %85\l  %105 = xor i32 %86, %87\l  %106 = and i32 %105, %88\l  %107 = xor i32 %106, %86\l  %108 = add i32 %104, %107\l  %109 = getelementptr inbounds [64 x i32], [64 x i32]* @K.585, i64 0, i64 %84\l  %110 = load i32, i32* %109, align 4, !tbaa !1635\l  %111 = add i32 %108, %110\l  %112 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %84\l  %113 = load i32, i32* %112, align 4, !tbaa !1635\l  %114 = add i32 %111, %113\l  %115 = lshr i32 %92, 2\l  %116 = shl i32 %92, 30\l  %117 = or i32 %116, %115\l  %118 = lshr i32 %92, 13\l  %119 = shl i32 %92, 19\l  %120 = or i32 %119, %118\l  %121 = xor i32 %117, %120\l  %122 = lshr i32 %92, 22\l  %123 = shl i32 %92, 10\l  %124 = or i32 %123, %122\l  %125 = xor i32 %121, %124\l  %126 = and i32 %91, %92\l  %127 = or i32 %91, %92\l  %128 = and i32 %90, %127\l  %129 = or i32 %128, %126\l  %130 = add i32 %125, %129\l  %131 = add i32 %114, %89\l  %132 = add i32 %130, %114\l  %133 = add nuw nsw i64 %84, 1\l  %134 = icmp eq i64 %133, 64\l  br i1 %134, label %135, label %83\l|{<s0>T|<s1>F}}"];
	Node0x1e3cec0:s0 -> Node0x1e3cf10;
	Node0x1e3cec0:s1 -> Node0x1e3cec0;
	Node0x1e3cf10 [shape=record,label="{%135:\l135:                                              \l  %136 = insertelement \<4 x i32\> undef, i32 %132, i32 0\l  %137 = insertelement \<4 x i32\> %136, i32 %92, i32 1\l  %138 = insertelement \<4 x i32\> %137, i32 %91, i32 2\l  %139 = insertelement \<4 x i32\> %138, i32 %90, i32 3\l  %140 = add \<4 x i32\> %139, %71\l  %141 = bitcast i32* %69 to \<4 x i32\>*\l  store \<4 x i32\> %140, \<4 x i32\>* %141, align 8, !tbaa !1635\l  %142 = insertelement \<4 x i32\> undef, i32 %131, i32 0\l  %143 = insertelement \<4 x i32\> %142, i32 %88, i32 1\l  %144 = insertelement \<4 x i32\> %143, i32 %87, i32 2\l  %145 = insertelement \<4 x i32\> %144, i32 %86, i32 3\l  %146 = add \<4 x i32\> %145, %74\l  %147 = bitcast i32* %72 to \<4 x i32\>*\l  store \<4 x i32\> %146, \<4 x i32\>* %147, align 8, !tbaa !1635\l  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %4) #40\l  ret void\l}"];
}
