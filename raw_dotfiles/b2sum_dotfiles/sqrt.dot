digraph "CFG for 'sqrt' function" {
	label="CFG for 'sqrt' function";

	Node0x16d3860 [shape=record,label="{%1:\l  %2 = bitcast double %0 to i64\l  %3 = lshr i64 %2, 32\l  %4 = trunc i64 %3 to i32\l  %5 = trunc i64 %2 to i32\l  %6 = and i32 %4, 2146435072\l  %7 = icmp eq i32 %6, 2146435072\l  br i1 %7, label %8, label %11\l|{<s0>T|<s1>F}}"];
	Node0x16d3860:s0 -> Node0x16d38b0;
	Node0x16d3860:s1 -> Node0x16d3900;
	Node0x16d38b0 [shape=record,label="{%8:\l8:                                                \l  %9 = tail call double @llvm.experimental.constrained.fmul.f64(double %0,\l... double %0, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %10 = tail call double @llvm.experimental.constrained.fadd.f64(double %9,\l... double %0, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  br label %177\l}"];
	Node0x16d38b0 -> Node0x16d4120;
	Node0x16d3900 [shape=record,label="{%11:\l11:                                               \l  %12 = icmp slt i32 %4, 1\l  br i1 %12, label %13, label %23\l|{<s0>T|<s1>F}}"];
	Node0x16d3900:s0 -> Node0x16d3950;
	Node0x16d3900:s1 -> Node0x16d3a40;
	Node0x16d3950 [shape=record,label="{%13:\l13:                                               \l  %14 = and i32 %4, 2147483647\l  %15 = or i32 %14, %5\l  %16 = icmp eq i32 %15, 0\l  br i1 %16, label %177, label %17\l|{<s0>T|<s1>F}}"];
	Node0x16d3950:s0 -> Node0x16d4120;
	Node0x16d3950:s1 -> Node0x16d39a0;
	Node0x16d39a0 [shape=record,label="{%17:\l17:                                               \l  %18 = icmp slt i32 %4, 0\l  br i1 %18, label %19, label %23\l|{<s0>T|<s1>F}}"];
	Node0x16d39a0:s0 -> Node0x16d39f0;
	Node0x16d39a0:s1 -> Node0x16d3a40;
	Node0x16d39f0 [shape=record,label="{%19:\l19:                                               \l  %20 = tail call double @llvm.experimental.constrained.fsub.f64(double %0,\l... double %0, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %21 = tail call double @llvm.experimental.constrained.fsub.f64(double %0,\l... double %0, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  %22 = tail call double @llvm.experimental.constrained.fdiv.f64(double %20,\l... double %21, metadata !\"round.dynamic\", metadata !\"fpexcept.ignore\") #40\l  br label %177\l}"];
	Node0x16d39f0 -> Node0x16d4120;
	Node0x16d3a40 [shape=record,label="{%23:\l23:                                               \l  %24 = lshr i64 %2, 52\l  %25 = trunc i64 %24 to i32\l  %26 = icmp eq i32 %25, 0\l  br i1 %26, label %27, label %59\l|{<s0>T|<s1>F}}"];
	Node0x16d3a40:s0 -> Node0x16d3a90;
	Node0x16d3a40:s1 -> Node0x16d3c70;
	Node0x16d3a90 [shape=record,label="{%27:\l27:                                               \l  %28 = icmp eq i32 %4, 0\l  br i1 %28, label %37, label %31\l|{<s0>T|<s1>F}}"];
	Node0x16d3a90:s0 -> Node0x16d3b80;
	Node0x16d3a90:s1 -> Node0x16d3b30;
	Node0x16d3ae0 [shape=record,label="{%29:\l29:                                               \l  %30 = add i32 %39, -20\l  br label %31\l}"];
	Node0x16d3ae0 -> Node0x16d3b30;
	Node0x16d3b30 [shape=record,label="{%31:\l31:                                               \l  %32 = phi i32 [ 1, %27 ], [ %30, %29 ]\l  %33 = phi i32 [ %5, %27 ], [ %42, %29 ]\l  %34 = phi i32 [ %4, %27 ], [ %41, %29 ]\l  %35 = and i32 %34, 1048576\l  %36 = icmp eq i32 %35, 0\l  br i1 %36, label %44, label %51\l|{<s0>T|<s1>F}}"];
	Node0x16d3b30:s0 -> Node0x16d3bd0;
	Node0x16d3b30:s1 -> Node0x16d3c20;
	Node0x16d3b80 [shape=record,label="{%37:\l37:                                               \l  %38 = phi i32 [ %42, %37 ], [ %5, %27 ]\l  %39 = phi i32 [ %40, %37 ], [ 0, %27 ]\l  %40 = add nsw i32 %39, -21\l  %41 = lshr i32 %38, 11\l  %42 = shl i32 %38, 21\l  %43 = icmp eq i32 %41, 0\l  br i1 %43, label %37, label %29\l|{<s0>T|<s1>F}}"];
	Node0x16d3b80:s0 -> Node0x16d3b80;
	Node0x16d3b80:s1 -> Node0x16d3ae0;
	Node0x16d3bd0 [shape=record,label="{%44:\l44:                                               \l  %45 = phi i32 [ %47, %44 ], [ %34, %31 ]\l  %46 = phi i32 [ %48, %44 ], [ 0, %31 ]\l  %47 = shl i32 %45, 1\l  %48 = add nuw nsw i32 %46, 1\l  %49 = and i32 %45, 524288\l  %50 = icmp eq i32 %49, 0\l  br i1 %50, label %44, label %51\l|{<s0>T|<s1>F}}"];
	Node0x16d3bd0:s0 -> Node0x16d3bd0;
	Node0x16d3bd0:s1 -> Node0x16d3c20;
	Node0x16d3c20 [shape=record,label="{%51:\l51:                                               \l  %52 = phi i32 [ 0, %31 ], [ %48, %44 ]\l  %53 = phi i32 [ %34, %31 ], [ %47, %44 ]\l  %54 = sub i32 %32, %52\l  %55 = sub nsw i32 32, %52\l  %56 = lshr i32 %33, %55\l  %57 = or i32 %56, %53\l  %58 = shl i32 %33, %52\l  br label %59\l}"];
	Node0x16d3c20 -> Node0x16d3c70;
	Node0x16d3c70 [shape=record,label="{%59:\l59:                                               \l  %60 = phi i32 [ %54, %51 ], [ %25, %23 ]\l  %61 = phi i32 [ %58, %51 ], [ %5, %23 ]\l  %62 = phi i32 [ %57, %51 ], [ %4, %23 ]\l  %63 = add nsw i32 %60, -1023\l  %64 = and i32 %62, 1048575\l  %65 = or i32 %64, 1048576\l  %66 = and i32 %63, 1\l  %67 = icmp eq i32 %66, 0\l  %68 = lshr i32 %61, 31\l  %69 = add nuw nsw i32 %65, %68\l  %70 = xor i1 %67, true\l  %71 = zext i1 %70 to i32\l  %72 = shl i32 %61, %71\l  %73 = select i1 %67, i32 0, i32 %69\l  %74 = add nuw nsw i32 %73, %65\l  %75 = lshr i32 %72, 31\l  %76 = shl nuw nsw i32 %74, 1\l  %77 = or i32 %76, %75\l  %78 = shl i32 %72, 1\l  br label %81\l}"];
	Node0x16d3c70 -> Node0x16d3d10;
	Node0x16d3cc0 [shape=record,label="{%79:\l79:                                               \l  %80 = lshr i32 %63, 1\l  br label %103\l}"];
	Node0x16d3cc0 -> Node0x16d3d60;
	Node0x16d3d10 [shape=record,label="{%81:\l81:                                               \l  %82 = phi i32 [ %78, %59 ], [ %101, %81 ]\l  %83 = phi i32 [ %77, %59 ], [ %99, %81 ]\l  %84 = phi i32 [ %72, %59 ], [ %82, %81 ]\l  %85 = phi i32 [ 0, %59 ], [ %93, %81 ]\l  %86 = phi i32 [ 2097152, %59 ], [ %100, %81 ]\l  %87 = phi i32 [ 0, %59 ], [ %92, %81 ]\l  %88 = add i32 %85, %86\l  %89 = icmp slt i32 %83, %88\l  %90 = add i32 %88, %86\l  %91 = select i1 %89, i32 0, i32 %86\l  %92 = add i32 %91, %87\l  %93 = select i1 %89, i32 %85, i32 %90\l  %94 = select i1 %89, i32 0, i32 %88\l  %95 = sub nsw i32 %83, %94\l  %96 = lshr i32 %84, 30\l  %97 = and i32 %96, 1\l  %98 = shl i32 %95, 1\l  %99 = or i32 %98, %97\l  %100 = lshr i32 %86, 1\l  %101 = shl i32 %82, 1\l  %102 = icmp eq i32 %100, 0\l  br i1 %102, label %79, label %81\l|{<s0>T|<s1>F}}"];
	Node0x16d3d10:s0 -> Node0x16d3cc0;
	Node0x16d3d10:s1 -> Node0x16d3d10;
	Node0x16d3d60 [shape=record,label="{%103:\l103:                                              \l  %104 = phi i32 [ %99, %79 ], [ %137, %129 ]\l  %105 = phi i32 [ 0, %79 ], [ %133, %129 ]\l  %106 = phi i32 [ %101, %79 ], [ %138, %129 ]\l  %107 = phi i32 [ 0, %79 ], [ %131, %129 ]\l  %108 = phi i32 [ %93, %79 ], [ %130, %129 ]\l  %109 = phi i32 [ -2147483648, %79 ], [ %139, %129 ]\l  %110 = add i32 %107, %109\l  %111 = icmp sgt i32 %104, %108\l  br i1 %111, label %116, label %112\l|{<s0>T|<s1>F}}"];
	Node0x16d3d60:s0 -> Node0x16d3e00;
	Node0x16d3d60:s1 -> Node0x16d3db0;
	Node0x16d3db0 [shape=record,label="{%112:\l112:                                              \l  %113 = icmp ne i32 %104, %108\l  %114 = icmp ult i32 %106, %110\l  %115 = or i1 %114, %113\l  br i1 %115, label %129, label %116\l|{<s0>T|<s1>F}}"];
	Node0x16d3db0:s0 -> Node0x16d3e50;
	Node0x16d3db0:s1 -> Node0x16d3e00;
	Node0x16d3e00 [shape=record,label="{%116:\l116:                                              \l  %117 = add i32 %110, %109\l  %118 = icmp slt i32 %110, 0\l  %119 = icmp sgt i32 %117, -1\l  %120 = and i1 %118, %119\l  %121 = zext i1 %120 to i32\l  %122 = add nsw i32 %108, %121\l  %123 = sub i32 %104, %108\l  %124 = icmp ult i32 %106, %110\l  %125 = sext i1 %124 to i32\l  %126 = add nsw i32 %123, %125\l  %127 = sub i32 %106, %110\l  %128 = add i32 %105, %109\l  br label %129\l}"];
	Node0x16d3e00 -> Node0x16d3e50;
	Node0x16d3e50 [shape=record,label="{%129:\l129:                                              \l  %130 = phi i32 [ %122, %116 ], [ %108, %112 ]\l  %131 = phi i32 [ %117, %116 ], [ %107, %112 ]\l  %132 = phi i32 [ %127, %116 ], [ %106, %112 ]\l  %133 = phi i32 [ %128, %116 ], [ %105, %112 ]\l  %134 = phi i32 [ %126, %116 ], [ %104, %112 ]\l  %135 = lshr i32 %132, 31\l  %136 = shl i32 %134, 1\l  %137 = or i32 %136, %135\l  %138 = shl i32 %132, 1\l  %139 = lshr i32 %109, 1\l  %140 = icmp eq i32 %139, 0\l  br i1 %140, label %141, label %103\l|{<s0>T|<s1>F}}"];
	Node0x16d3e50:s0 -> Node0x16d3ea0;
	Node0x16d3e50:s1 -> Node0x16d3d60;
	Node0x16d3ea0 [shape=record,label="{%141:\l141:                                              \l  %142 = or i32 %137, %138\l  %143 = icmp eq i32 %142, 0\l  br i1 %143, label %162, label %144\l|{<s0>T|<s1>F}}"];
	Node0x16d3ea0:s0 -> Node0x16d40d0;
	Node0x16d3ea0:s1 -> Node0x16d3ef0;
	Node0x16d3ef0 [shape=record,label="{%144:\l144:                                              \l  %145 = tail call double @llvm.experimental.constrained.fsub.f64(double\l... 1.000000e+00, double 1.000000e-300, metadata !\"round.dynamic\", metadata\l... !\"fpexcept.ignore\") #40\l  %146 = tail call i1 @llvm.experimental.constrained.fcmps.f64(double %145,\l... double 1.000000e+00, metadata !\"oge\", metadata !\"fpexcept.ignore\") #40\l  br i1 %146, label %147, label %162\l|{<s0>T|<s1>F}}"];
	Node0x16d3ef0:s0 -> Node0x16d3f40;
	Node0x16d3ef0:s1 -> Node0x16d40d0;
	Node0x16d3f40 [shape=record,label="{%147:\l147:                                              \l  %148 = tail call double @llvm.experimental.constrained.fadd.f64(double\l... 1.000000e+00, double 1.000000e-300, metadata !\"round.dynamic\", metadata\l... !\"fpexcept.ignore\") #40\l  %149 = icmp eq i32 %133, -1\l  br i1 %149, label %150, label %152\l|{<s0>T|<s1>F}}"];
	Node0x16d3f40:s0 -> Node0x16d3f90;
	Node0x16d3f40:s1 -> Node0x16d3fe0;
	Node0x16d3f90 [shape=record,label="{%150:\l150:                                              \l  %151 = add nsw i32 %92, 1\l  br label %162\l}"];
	Node0x16d3f90 -> Node0x16d40d0;
	Node0x16d3fe0 [shape=record,label="{%152:\l152:                                              \l  %153 = tail call i1 @llvm.experimental.constrained.fcmps.f64(double %148,\l... double 1.000000e+00, metadata !\"ogt\", metadata !\"fpexcept.ignore\") #40\l  br i1 %153, label %154, label %159\l|{<s0>T|<s1>F}}"];
	Node0x16d3fe0:s0 -> Node0x16d4030;
	Node0x16d3fe0:s1 -> Node0x16d4080;
	Node0x16d4030 [shape=record,label="{%154:\l154:                                              \l  %155 = icmp eq i32 %133, -2\l  %156 = zext i1 %155 to i32\l  %157 = add nsw i32 %92, %156\l  %158 = add i32 %133, 2\l  br label %162\l}"];
	Node0x16d4030 -> Node0x16d40d0;
	Node0x16d4080 [shape=record,label="{%159:\l159:                                              \l  %160 = and i32 %133, 1\l  %161 = add nuw i32 %160, %133\l  br label %162\l}"];
	Node0x16d4080 -> Node0x16d40d0;
	Node0x16d40d0 [shape=record,label="{%162:\l162:                                              \l  %163 = phi i32 [ %151, %150 ], [ %157, %154 ], [ %92, %159 ], [ %92, %144 ],\l... [ %92, %141 ]\l  %164 = phi i32 [ 0, %150 ], [ %158, %154 ], [ %161, %159 ], [ %133, %144 ],\l... [ %133, %141 ]\l  %165 = ashr i32 %163, 1\l  %166 = lshr i32 %164, 1\l  %167 = shl i32 %163, 31\l  %168 = or i32 %166, %167\l  %169 = shl i32 %80, 20\l  %170 = add i32 %169, 1071644672\l  %171 = add i32 %170, %165\l  %172 = zext i32 %171 to i64\l  %173 = shl nuw i64 %172, 32\l  %174 = zext i32 %168 to i64\l  %175 = or i64 %173, %174\l  %176 = bitcast i64 %175 to double\l  br label %177\l}"];
	Node0x16d40d0 -> Node0x16d4120;
	Node0x16d4120 [shape=record,label="{%177:\l177:                                              \l  %178 = phi double [ %10, %8 ], [ %22, %19 ], [ %176, %162 ], [ %0, %13 ]\l  ret double %178\l}"];
}
