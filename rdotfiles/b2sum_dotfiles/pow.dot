digraph "CFG for 'pow' function" {
	label="CFG for 'pow' function";

	Node0x1887bf0 [shape=record,label="{%2:\l  %3 = alloca double, align 8\l  %4 = alloca double, align 8\l  %5 = alloca double, align 8\l  %6 = bitcast double %0 to i64\l  %7 = bitcast double %1 to i64\l  %8 = lshr i64 %6, 52\l  %9 = trunc i64 %8 to i32\l  %10 = lshr i64 %7, 52\l  %11 = trunc i64 %10 to i32\l  %12 = add nsw i32 %9, -1\l  %13 = icmp ugt i32 %12, 2045\l  %14 = and i32 %11, 2047\l  %15 = add nsw i32 %14, -958\l  %16 = icmp ugt i32 %15, 127\l  %17 = or i1 %13, %16\l  br i1 %17, label %18, label %140, !prof !1632, !misexpect !1633\l|{<s0>T|<s1>F}}"];
	Node0x1887bf0:s0 -> Node0x1887ca0[label="W:1"];
	Node0x1887bf0:s1 -> Node0x18886a0[label="W:2000"];
	Node0x1887ca0 [shape=record,label="{%18:\l18:                                               \l  %19 = shl i64 %7, 1\l  %20 = add i64 %19, -1\l  %21 = tail call double @llvm.experimental.constrained.fpext.f64.f32(float\l... 0x7FF0000000000000, metadata !fpexcept.ignore) #40\l  %22 = bitcast double %21 to i64\l  %23 = shl i64 %22, 1\l  %24 = add i64 %23, -1\l  %25 = icmp ult i64 %20, %24\l  br i1 %25, label %54, label %26, !prof !1634, !misexpect !1633\l|{<s0>T|<s1>F}}"];
	Node0x1887ca0:s0 -> Node0x1887f20[label="W:2000"];
	Node0x1887ca0:s1 -> Node0x1887cf0[label="W:1"];
	Node0x1887cf0 [shape=record,label="{%26:\l26:                                               \l  %27 = icmp eq i64 %19, 0\l  %28 = icmp eq i64 %6, 4607182418800017408\l  %29 = or i1 %28, %27\l  br i1 %29, label %329, label %30\l|{<s0>T|<s1>F}}"];
	Node0x1887cf0:s0 -> Node0x1888b00;
	Node0x1887cf0:s1 -> Node0x1887d40;
	Node0x1887d40 [shape=record,label="{%30:\l30:                                               \l  %31 = shl i64 %6, 1\l  %32 = tail call double @llvm.experimental.constrained.fpext.f64.f32(float\l... 0x7FF0000000000000, metadata !fpexcept.ignore) #41\l  %33 = bitcast double %32 to i64\l  %34 = shl i64 %33, 1\l  %35 = icmp ugt i64 %31, %34\l  br i1 %35, label %41, label %36\l|{<s0>T|<s1>F}}"];
	Node0x1887d40:s0 -> Node0x1887de0;
	Node0x1887d40:s1 -> Node0x1887d90;
	Node0x1887d90 [shape=record,label="{%36:\l36:                                               \l  %37 = tail call double @llvm.experimental.constrained.fpext.f64.f32(float\l... 0x7FF0000000000000, metadata !fpexcept.ignore) #41\l  %38 = bitcast double %37 to i64\l  %39 = shl i64 %38, 1\l  %40 = icmp ugt i64 %19, %39\l  br i1 %40, label %41, label %43\l|{<s0>T|<s1>F}}"];
	Node0x1887d90:s0 -> Node0x1887de0;
	Node0x1887d90:s1 -> Node0x1887e30;
	Node0x1887de0 [shape=record,label="{%41:\l41:                                               \l  %42 = tail call double @llvm.experimental.constrained.fadd.f64(double %0,\l... double %1, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  br label %329\l}"];
	Node0x1887de0 -> Node0x1888b00;
	Node0x1887e30 [shape=record,label="{%43:\l43:                                               \l  %44 = icmp eq i64 %31, 9214364837600034816\l  br i1 %44, label %329, label %45\l|{<s0>T|<s1>F}}"];
	Node0x1887e30:s0 -> Node0x1888b00;
	Node0x1887e30:s1 -> Node0x1887e80;
	Node0x1887e80 [shape=record,label="{%45:\l45:                                               \l  %46 = icmp ult i64 %31, 9214364837600034816\l  %47 = zext i1 %46 to i32\l  %48 = lshr i64 %7, 63\l  %49 = trunc i64 %48 to i32\l  %50 = xor i32 %49, 1\l  %51 = icmp eq i32 %50, %47\l  br i1 %51, label %329, label %52\l|{<s0>T|<s1>F}}"];
	Node0x1887e80:s0 -> Node0x1888b00;
	Node0x1887e80:s1 -> Node0x1887ed0;
	Node0x1887ed0 [shape=record,label="{%52:\l52:                                               \l  %53 = tail call double @llvm.experimental.constrained.fmul.f64(double %1,\l... double %1, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  br label %329\l}"];
	Node0x1887ed0 -> Node0x1888b00;
	Node0x1887f20 [shape=record,label="{%54:\l54:                                               \l  %55 = shl i64 %6, 1\l  %56 = add i64 %55, -1\l  %57 = tail call double @llvm.experimental.constrained.fpext.f64.f32(float\l... 0x7FF0000000000000, metadata !fpexcept.ignore) #40\l  %58 = bitcast double %57 to i64\l  %59 = shl i64 %58, 1\l  %60 = add i64 %59, -1\l  %61 = icmp ult i64 %56, %60\l  br i1 %61, label %88, label %62, !prof !1634, !misexpect !1633\l|{<s0>T|<s1>F}}"];
	Node0x1887f20:s0 -> Node0x18880b0[label="W:2000"];
	Node0x1887f20:s1 -> Node0x1887f70[label="W:1"];
	Node0x1887f70 [shape=record,label="{%62:\l62:                                               \l  %63 = tail call double @llvm.experimental.constrained.fmul.f64(double %0,\l... double %0, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %64 = icmp sgt i64 %6, -1\l  %65 = add nsw i32 %14, -1023\l  %66 = icmp ugt i32 %65, 52\l  %67 = or i1 %64, %66\l  br i1 %67, label %80, label %68\l|{<s0>T|<s1>F}}"];
	Node0x1887f70:s0 -> Node0x1888010;
	Node0x1887f70:s1 -> Node0x1887fc0;
	Node0x1887fc0 [shape=record,label="{%68:\l68:                                               \l  %69 = sub nuw nsw i32 1075, %14\l  %70 = zext i32 %69 to i64\l  %71 = shl nuw nsw i64 1, %70\l  %72 = add nsw i64 %71, -1\l  %73 = and i64 %72, %7\l  %74 = icmp ne i64 %73, 0\l  %75 = and i64 %71, %7\l  %76 = icmp eq i64 %75, 0\l  %77 = or i1 %76, %74\l  %78 = fneg double %63\l  %79 = select i1 %77, double %63, double %78\l  br label %80\l}"];
	Node0x1887fc0 -> Node0x1888010;
	Node0x1888010 [shape=record,label="{%80:\l80:                                               \l  %81 = phi double [ %63, %62 ], [ %79, %68 ]\l  %82 = icmp slt i64 %7, 0\l  br i1 %82, label %83, label %329\l|{<s0>T|<s1>F}}"];
	Node0x1888010:s0 -> Node0x1888060;
	Node0x1888010:s1 -> Node0x1888b00;
	Node0x1888060 [shape=record,label="{%83:\l83:                                               \l  %84 = tail call double @llvm.experimental.constrained.sitofp.f64.i32(i32 1,\l... metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %85 = tail call double @llvm.experimental.constrained.fdiv.f64(double %84,\l... double %81, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %86 = bitcast double* %3 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86)\l  store volatile double %85, double* %3, align 8, !tbaa !1635\l  %87 = load volatile double, double* %3, align 8, !tbaa !1635\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86)\l  br label %329\l}"];
	Node0x1888060 -> Node0x1888b00;
	Node0x18880b0 [shape=record,label="{%88:\l88:                                               \l  %89 = icmp slt i64 %6, 0\l  br i1 %89, label %90, label %111\l|{<s0>T|<s1>F}}"];
	Node0x18880b0:s0 -> Node0x1888100;
	Node0x18880b0:s1 -> Node0x1888330;
	Node0x1888100 [shape=record,label="{%90:\l90:                                               \l  %91 = icmp ult i32 %14, 1023\l  br i1 %91, label %109, label %92\l|{<s0>T|<s1>F}}"];
	Node0x1888100:s0 -> Node0x18882e0;
	Node0x1888100:s1 -> Node0x1888150;
	Node0x1888150 [shape=record,label="{%92:\l92:                                               \l  %93 = icmp ugt i32 %14, 1075\l  br i1 %93, label %104, label %94\l|{<s0>T|<s1>F}}"];
	Node0x1888150:s0 -> Node0x1888240;
	Node0x1888150:s1 -> Node0x18881a0;
	Node0x18881a0 [shape=record,label="{%94:\l94:                                               \l  %95 = sub nuw nsw i32 1075, %14\l  %96 = zext i32 %95 to i64\l  %97 = shl nuw nsw i64 1, %96\l  %98 = add nsw i64 %97, -1\l  %99 = and i64 %98, %7\l  %100 = icmp eq i64 %99, 0\l  br i1 %100, label %101, label %109\l|{<s0>T|<s1>F}}"];
	Node0x18881a0:s0 -> Node0x18881f0;
	Node0x18881a0:s1 -> Node0x18882e0;
	Node0x18881f0 [shape=record,label="{%101:\l101:                                              \l  %102 = and i64 %97, %7\l  %103 = icmp eq i64 %102, 0\l  br i1 %103, label %104, label %105\l|{<s0>T|<s1>F}}"];
	Node0x18881f0:s0 -> Node0x1888240;
	Node0x18881f0:s1 -> Node0x1888290;
	Node0x1888240 [shape=record,label="{%104:\l104:                                              \l  br label %105\l}"];
	Node0x1888240 -> Node0x1888290;
	Node0x1888290 [shape=record,label="{%105:\l105:                                              \l  %106 = phi i32 [ 0, %104 ], [ 262144, %101 ]\l  %107 = and i64 %6, 9223372036854775807\l  %108 = and i32 %9, 2047\l  br label %111\l}"];
	Node0x1888290 -> Node0x1888330;
	Node0x18882e0 [shape=record,label="{%109:\l109:                                              \l  %110 = tail call double @__math_invalid(double %0) #42\l  br label %329\l}"];
	Node0x18882e0 -> Node0x1888b00;
	Node0x1888330 [shape=record,label="{%111:\l111:                                              \l  %112 = phi i32 [ %9, %88 ], [ %108, %105 ]\l  %113 = phi i64 [ %6, %88 ], [ %107, %105 ]\l  %114 = phi i32 [ 0, %88 ], [ %106, %105 ]\l  br i1 %16, label %115, label %133\l|{<s0>T|<s1>F}}"];
	Node0x1888330:s0 -> Node0x1888380;
	Node0x1888330:s1 -> Node0x1888600;
	Node0x1888380 [shape=record,label="{%115:\l115:                                              \l  %116 = icmp eq i64 %113, 4607182418800017408\l  br i1 %116, label %329, label %117\l|{<s0>T|<s1>F}}"];
	Node0x1888380:s0 -> Node0x1888b00;
	Node0x1888380:s1 -> Node0x18883d0;
	Node0x18883d0 [shape=record,label="{%117:\l117:                                              \l  %118 = icmp ult i32 %14, 958\l  br i1 %118, label %119, label %125\l|{<s0>T|<s1>F}}"];
	Node0x18883d0:s0 -> Node0x1888420;
	Node0x18883d0:s1 -> Node0x1888510;
	Node0x1888420 [shape=record,label="{%119:\l119:                                              \l  %120 = icmp ugt i64 %113, 4607182418800017408\l  br i1 %120, label %121, label %123\l|{<s0>T|<s1>F}}"];
	Node0x1888420:s0 -> Node0x1888470;
	Node0x1888420:s1 -> Node0x18884c0;
	Node0x1888470 [shape=record,label="{%121:\l121:                                              \l  %122 = tail call double @llvm.experimental.constrained.fadd.f64(double\l... 1.000000e+00, double %1, metadata !round.dynamic, metadata\l... !fpexcept.ignore) #41\l  br label %329\l}"];
	Node0x1888470 -> Node0x1888b00;
	Node0x18884c0 [shape=record,label="{%123:\l123:                                              \l  %124 = tail call double @llvm.experimental.constrained.fsub.f64(double\l... 1.000000e+00, double %1, metadata !round.dynamic, metadata\l... !fpexcept.ignore) #41\l  br label %329\l}"];
	Node0x18884c0 -> Node0x1888b00;
	Node0x1888510 [shape=record,label="{%125:\l125:                                              \l  %126 = icmp ult i64 %113, 4607182418800017409\l  %127 = icmp ult i32 %11, 2048\l  %128 = xor i1 %127, %126\l  br i1 %128, label %129, label %131\l|{<s0>T|<s1>F}}"];
	Node0x1888510:s0 -> Node0x1888560;
	Node0x1888510:s1 -> Node0x18885b0;
	Node0x1888560 [shape=record,label="{%129:\l129:                                              \l  %130 = tail call double @__math_oflow(i32 0) #42\l  br label %329\l}"];
	Node0x1888560 -> Node0x1888b00;
	Node0x18885b0 [shape=record,label="{%131:\l131:                                              \l  %132 = tail call double @__math_uflow(i32 0) #42\l  br label %329\l}"];
	Node0x18885b0 -> Node0x1888b00;
	Node0x1888600 [shape=record,label="{%133:\l133:                                              \l  %134 = icmp eq i32 %112, 0\l  br i1 %134, label %135, label %140\l|{<s0>T|<s1>F}}"];
	Node0x1888600:s0 -> Node0x1888650;
	Node0x1888600:s1 -> Node0x18886a0;
	Node0x1888650 [shape=record,label="{%135:\l135:                                              \l  %136 = tail call double @llvm.experimental.constrained.fmul.f64(double %0,\l... double 0x4330000000000000, metadata !round.dynamic, metadata\l... !fpexcept.ignore) #41\l  %137 = bitcast double %136 to i64\l  %138 = and i64 %137, 9223372036854775807\l  %139 = add nsw i64 %138, -234187180623265792\l  br label %140\l}"];
	Node0x1888650 -> Node0x18886a0;
	Node0x18886a0 [shape=record,label="{%140:\l140:                                              \l  %141 = phi i64 [ %139, %135 ], [ %113, %133 ], [ %6, %2 ]\l  %142 = phi i32 [ %114, %135 ], [ %114, %133 ], [ 0, %2 ]\l  %143 = add i64 %141, -4604531861337669632\l  %144 = lshr i64 %143, 45\l  %145 = and i64 %144, 127\l  %146 = ashr i64 %143, 52\l  %147 = trunc i64 %146 to i32\l  %148 = and i64 %143, -4503599627370496\l  %149 = sub i64 %141, %148\l  %150 = bitcast i64 %149 to double\l  %151 = tail call double @llvm.experimental.constrained.sitofp.f64.i32(i32\l... %147, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %152 = getelementptr inbounds %struct.pow_log_data, %struct.pow_log_data*\l... @__pow_log_data, i64 0, i32 3, i64 %145, i32 0\l  %153 = load double, double* %152, align 8, !tbaa !1639\l  %154 = getelementptr inbounds %struct.pow_log_data, %struct.pow_log_data*\l... @__pow_log_data, i64 0, i32 3, i64 %145, i32 2\l  %155 = load double, double* %154, align 8, !tbaa !1641\l  %156 = getelementptr inbounds %struct.pow_log_data, %struct.pow_log_data*\l... @__pow_log_data, i64 0, i32 3, i64 %145, i32 3\l  %157 = load double, double* %156, align 8, !tbaa !1642\l  %158 = add i64 %149, 2147483648\l  %159 = and i64 %158, -4294967296\l  %160 = bitcast i64 %159 to double\l  %161 = tail call double @llvm.experimental.constrained.fsub.f64(double %150,\l... double %160, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %162 = tail call double @llvm.experimental.constrained.fmul.f64(double %160,\l... double %153, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %163 = tail call double @llvm.experimental.constrained.fsub.f64(double %162,\l... double 1.000000e+00, metadata !round.dynamic, metadata !fpexcept.ignore)\l... #40\l  %164 = tail call double @llvm.experimental.constrained.fmul.f64(double %161,\l... double %153, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %165 = tail call double @llvm.experimental.constrained.fadd.f64(double %163,\l... double %164, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %166 = load double, double* getelementptr inbounds (%struct.pow_log_data,\l... %struct.pow_log_data* @__pow_log_data, i64 0, i32 0), align 8, !tbaa !1643\l  %167 = tail call double @llvm.experimental.constrained.fmul.f64(double %151,\l... double %166, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %168 = tail call double @llvm.experimental.constrained.fadd.f64(double %167,\l... double %155, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %169 = tail call double @llvm.experimental.constrained.fadd.f64(double %168,\l... double %165, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %170 = load double, double* getelementptr inbounds (%struct.pow_log_data,\l... %struct.pow_log_data* @__pow_log_data, i64 0, i32 1), align 8, !tbaa !1645\l  %171 = tail call double @llvm.experimental.constrained.fmul.f64(double %151,\l... double %170, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %172 = tail call double @llvm.experimental.constrained.fadd.f64(double %171,\l... double %157, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %173 = tail call double @llvm.experimental.constrained.fsub.f64(double %168,\l... double %169, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %174 = tail call double @llvm.experimental.constrained.fadd.f64(double %173,\l... double %165, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %175 = load double, double* getelementptr inbounds (%struct.pow_log_data,\l... %struct.pow_log_data* @__pow_log_data, i64 0, i32 2, i64 0), align 8, !tbaa\l... !1635\l  %176 = tail call double @llvm.experimental.constrained.fmul.f64(double %175,\l... double %165, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %177 = tail call double @llvm.experimental.constrained.fmul.f64(double %165,\l... double %176, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %178 = tail call double @llvm.experimental.constrained.fmul.f64(double %165,\l... double %177, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %179 = tail call double @llvm.experimental.constrained.fmul.f64(double %175,\l... double %163, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %180 = tail call double @llvm.experimental.constrained.fmul.f64(double %163,\l... double %179, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %181 = tail call double @llvm.experimental.constrained.fadd.f64(double %169,\l... double %180, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %182 = tail call double @llvm.experimental.constrained.fadd.f64(double %176,\l... double %179, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %183 = tail call double @llvm.experimental.constrained.fmul.f64(double %164,\l... double %182, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %184 = tail call double @llvm.experimental.constrained.fsub.f64(double %169,\l... double %181, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %185 = tail call double @llvm.experimental.constrained.fadd.f64(double %184,\l... double %180, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %186 = load double, double* getelementptr inbounds (%struct.pow_log_data,\l... %struct.pow_log_data* @__pow_log_data, i64 0, i32 2, i64 1), align 8, !tbaa\l... !1635\l  %187 = load double, double* getelementptr inbounds (%struct.pow_log_data,\l... %struct.pow_log_data* @__pow_log_data, i64 0, i32 2, i64 2), align 8, !tbaa\l... !1635\l  %188 = tail call double @llvm.experimental.constrained.fmul.f64(double %165,\l... double %187, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %189 = tail call double @llvm.experimental.constrained.fadd.f64(double %186,\l... double %188, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %190 = load double, double* getelementptr inbounds (%struct.pow_log_data,\l... %struct.pow_log_data* @__pow_log_data, i64 0, i32 2, i64 3), align 8, !tbaa\l... !1635\l  %191 = load double, double* getelementptr inbounds (%struct.pow_log_data,\l... %struct.pow_log_data* @__pow_log_data, i64 0, i32 2, i64 4), align 8, !tbaa\l... !1635\l  %192 = tail call double @llvm.experimental.constrained.fmul.f64(double %165,\l... double %191, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %193 = tail call double @llvm.experimental.constrained.fadd.f64(double %190,\l... double %192, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %194 = load double, double* getelementptr inbounds (%struct.pow_log_data,\l... %struct.pow_log_data* @__pow_log_data, i64 0, i32 2, i64 5), align 8, !tbaa\l... !1635\l  %195 = load double, double* getelementptr inbounds (%struct.pow_log_data,\l... %struct.pow_log_data* @__pow_log_data, i64 0, i32 2, i64 6), align 8, !tbaa\l... !1635\l  %196 = tail call double @llvm.experimental.constrained.fmul.f64(double %165,\l... double %195, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %197 = tail call double @llvm.experimental.constrained.fadd.f64(double %194,\l... double %196, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %198 = tail call double @llvm.experimental.constrained.fmul.f64(double %177,\l... double %197, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %199 = tail call double @llvm.experimental.constrained.fadd.f64(double %193,\l... double %198, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %200 = tail call double @llvm.experimental.constrained.fmul.f64(double %177,\l... double %199, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %201 = tail call double @llvm.experimental.constrained.fadd.f64(double %189,\l... double %200, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %202 = tail call double @llvm.experimental.constrained.fmul.f64(double %178,\l... double %201, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %203 = tail call double @llvm.experimental.constrained.fadd.f64(double %172,\l... double %174, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %204 = tail call double @llvm.experimental.constrained.fadd.f64(double %203,\l... double %183, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %205 = tail call double @llvm.experimental.constrained.fadd.f64(double %204,\l... double %185, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %206 = tail call double @llvm.experimental.constrained.fadd.f64(double %205,\l... double %202, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %207 = tail call double @llvm.experimental.constrained.fadd.f64(double %181,\l... double %206, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %208 = tail call double @llvm.experimental.constrained.fsub.f64(double %181,\l... double %207, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %209 = tail call double @llvm.experimental.constrained.fadd.f64(double %208,\l... double %206, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %210 = and i64 %7, -134217728\l  %211 = bitcast i64 %210 to double\l  %212 = tail call double @llvm.experimental.constrained.fsub.f64(double %1,\l... double %211, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %213 = bitcast double %207 to i64\l  %214 = and i64 %213, -134217728\l  %215 = bitcast i64 %214 to double\l  %216 = tail call double @llvm.experimental.constrained.fsub.f64(double %207,\l... double %215, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %217 = tail call double @llvm.experimental.constrained.fadd.f64(double %216,\l... double %209, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %218 = tail call double @llvm.experimental.constrained.fmul.f64(double %211,\l... double %215, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %219 = tail call double @llvm.experimental.constrained.fmul.f64(double %212,\l... double %215, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %220 = tail call double @llvm.experimental.constrained.fmul.f64(double %1,\l... double %217, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %221 = tail call double @llvm.experimental.constrained.fadd.f64(double %219,\l... double %220, metadata !round.dynamic, metadata !fpexcept.ignore) #41\l  %222 = bitcast double %218 to i64\l  %223 = lshr i64 %222, 52\l  %224 = trunc i64 %223 to i32\l  %225 = and i32 %224, 2047\l  %226 = add nsw i32 %225, -969\l  %227 = icmp ult i32 %226, 63\l  br i1 %227, label %243, label %228, !prof !1634, !misexpect !1633\l|{<s0>T|<s1>F}}"];
	Node0x18886a0:s0 -> Node0x18888d0[label="W:2000"];
	Node0x18886a0:s1 -> Node0x18886f0[label="W:1"];
	Node0x18886f0 [shape=record,label="{%228:\l228:                                              \l  %229 = icmp ult i32 %225, 969\l  br i1 %229, label %230, label %235\l|{<s0>T|<s1>F}}"];
	Node0x18886f0:s0 -> Node0x1888740;
	Node0x18886f0:s1 -> Node0x1888790;
	Node0x1888740 [shape=record,label="{%230:\l230:                                              \l  %231 = tail call double @llvm.experimental.constrained.fadd.f64(double\l... 1.000000e+00, double %218, metadata !round.dynamic, metadata\l... !fpexcept.ignore) #40\l  %232 = icmp eq i32 %142, 0\l  %233 = fneg double %231\l  %234 = select i1 %232, double %231, double %233\l  br label %329\l}"];
	Node0x1888740 -> Node0x1888b00;
	Node0x1888790 [shape=record,label="{%235:\l235:                                              \l  %236 = icmp ult i32 %225, 1033\l  br i1 %236, label %243, label %237\l|{<s0>T|<s1>F}}"];
	Node0x1888790:s0 -> Node0x18888d0;
	Node0x1888790:s1 -> Node0x18887e0;
	Node0x18887e0 [shape=record,label="{%237:\l237:                                              \l  %238 = icmp slt i64 %222, 0\l  br i1 %238, label %239, label %241\l|{<s0>T|<s1>F}}"];
	Node0x18887e0:s0 -> Node0x1888830;
	Node0x18887e0:s1 -> Node0x1888880;
	Node0x1888830 [shape=record,label="{%239:\l239:                                              \l  %240 = tail call double @__math_uflow(i32 %142) #42\l  br label %329\l}"];
	Node0x1888830 -> Node0x1888b00;
	Node0x1888880 [shape=record,label="{%241:\l241:                                              \l  %242 = tail call double @__math_oflow(i32 %142) #42\l  br label %329\l}"];
	Node0x1888880 -> Node0x1888b00;
	Node0x18888d0 [shape=record,label="{%243:\l243:                                              \l  %244 = phi i32 [ %225, %140 ], [ 0, %235 ]\l  %245 = load double, double* getelementptr inbounds (%struct.exp_data,\l... %struct.exp_data* @__exp_data, i64 0, i32 0), align 8, !tbaa !1646\l  %246 = tail call double @llvm.experimental.constrained.fmul.f64(double %245,\l... double %218, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %247 = load double, double* getelementptr inbounds (%struct.exp_data,\l... %struct.exp_data* @__exp_data, i64 0, i32 1), align 8, !tbaa !1648\l  %248 = tail call double @llvm.experimental.constrained.fadd.f64(double %246,\l... double %247, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %249 = bitcast double %248 to i64\l  %250 = tail call double @llvm.experimental.constrained.fsub.f64(double %248,\l... double %247, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %251 = load double, double* getelementptr inbounds (%struct.exp_data,\l... %struct.exp_data* @__exp_data, i64 0, i32 2), align 8, !tbaa !1649\l  %252 = tail call double @llvm.experimental.constrained.fmul.f64(double %250,\l... double %251, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %253 = tail call double @llvm.experimental.constrained.fadd.f64(double %218,\l... double %252, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %254 = load double, double* getelementptr inbounds (%struct.exp_data,\l... %struct.exp_data* @__exp_data, i64 0, i32 3), align 8, !tbaa !1650\l  %255 = tail call double @llvm.experimental.constrained.fmul.f64(double %250,\l... double %254, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %256 = tail call double @llvm.experimental.constrained.fadd.f64(double %253,\l... double %255, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %257 = tail call double @llvm.experimental.constrained.fadd.f64(double %256,\l... double %221, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %258 = shl i64 %249, 1\l  %259 = and i64 %258, 254\l  %260 = zext i32 %142 to i64\l  %261 = add i64 %249, %260\l  %262 = shl i64 %261, 45\l  %263 = getelementptr inbounds %struct.exp_data, %struct.exp_data*\l... @__exp_data, i64 0, i32 7, i64 %259\l  %264 = bitcast i64* %263 to double*\l  %265 = load double, double* %264, align 8, !tbaa !1651\l  %266 = or i64 %259, 1\l  %267 = getelementptr inbounds %struct.exp_data, %struct.exp_data*\l... @__exp_data, i64 0, i32 7, i64 %266\l  %268 = load i64, i64* %267, align 8, !tbaa !1651\l  %269 = add i64 %268, %262\l  %270 = tail call double @llvm.experimental.constrained.fmul.f64(double %257,\l... double %257, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %271 = tail call double @llvm.experimental.constrained.fadd.f64(double %265,\l... double %257, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %272 = load double, double* getelementptr inbounds (%struct.exp_data,\l... %struct.exp_data* @__exp_data, i64 0, i32 4, i64 0), align 8, !tbaa !1635\l  %273 = load double, double* getelementptr inbounds (%struct.exp_data,\l... %struct.exp_data* @__exp_data, i64 0, i32 4, i64 1), align 8, !tbaa !1635\l  %274 = tail call double @llvm.experimental.constrained.fmul.f64(double %257,\l... double %273, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %275 = tail call double @llvm.experimental.constrained.fadd.f64(double %272,\l... double %274, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %276 = tail call double @llvm.experimental.constrained.fmul.f64(double %270,\l... double %275, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %277 = tail call double @llvm.experimental.constrained.fadd.f64(double %271,\l... double %276, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %278 = tail call double @llvm.experimental.constrained.fmul.f64(double %270,\l... double %270, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %279 = load double, double* getelementptr inbounds (%struct.exp_data,\l... %struct.exp_data* @__exp_data, i64 0, i32 4, i64 2), align 8, !tbaa !1635\l  %280 = load double, double* getelementptr inbounds (%struct.exp_data,\l... %struct.exp_data* @__exp_data, i64 0, i32 4, i64 3), align 8, !tbaa !1635\l  %281 = tail call double @llvm.experimental.constrained.fmul.f64(double %257,\l... double %280, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %282 = tail call double @llvm.experimental.constrained.fadd.f64(double %279,\l... double %281, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %283 = tail call double @llvm.experimental.constrained.fmul.f64(double %278,\l... double %282, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %284 = tail call double @llvm.experimental.constrained.fadd.f64(double %277,\l... double %283, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %285 = icmp eq i32 %244, 0\l  br i1 %285, label %286, label %325, !prof !1632, !misexpect !1633\l|{<s0>T|<s1>F}}"];
	Node0x18888d0:s0 -> Node0x1888920[label="W:1"];
	Node0x18888d0:s1 -> Node0x1888ab0[label="W:2000"];
	Node0x1888920 [shape=record,label="{%286:\l286:                                              \l  %287 = trunc i64 %249 to i32\l  %288 = icmp sgt i32 %287, -1\l  br i1 %288, label %289, label %295\l|{<s0>T|<s1>F}}"];
	Node0x1888920:s0 -> Node0x1888970;
	Node0x1888920:s1 -> Node0x18889c0;
	Node0x1888970 [shape=record,label="{%289:\l289:                                              \l  %290 = add i64 %269, -4544132024016830464\l  %291 = bitcast i64 %290 to double\l  %292 = tail call double @llvm.experimental.constrained.fmul.f64(double %291,\l... double %284, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %293 = tail call double @llvm.experimental.constrained.fadd.f64(double %291,\l... double %292, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %294 = tail call double @llvm.experimental.constrained.fmul.f64(double\l... 0x7F00000000000000, double %293, metadata !round.dynamic, metadata\l... !fpexcept.ignore) #40\l  br label %329\l}"];
	Node0x1888970 -> Node0x1888b00;
	Node0x18889c0 [shape=record,label="{%295:\l295:                                              \l  %296 = add i64 %269, 4602678819172646912\l  %297 = bitcast i64 %296 to double\l  %298 = tail call double @llvm.experimental.constrained.fmul.f64(double %297,\l... double %284, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %299 = tail call double @llvm.experimental.constrained.fadd.f64(double %297,\l... double %298, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %300 = tail call double @fabs(double %299) #42\l  %301 = tail call i1 @llvm.experimental.constrained.fcmps.f64(double %300,\l... double 1.000000e+00, metadata !olt, metadata !fpexcept.ignore) #40\l  br i1 %301, label %302, label %322\l|{<s0>T|<s1>F}}"];
	Node0x18889c0:s0 -> Node0x1888a10;
	Node0x18889c0:s1 -> Node0x1888a60;
	Node0x1888a10 [shape=record,label="{%302:\l302:                                              \l  %303 = tail call i1 @llvm.experimental.constrained.fcmps.f64(double %299,\l... double 0.000000e+00, metadata !olt, metadata !fpexcept.ignore) #40\l  %304 = select i1 %303, double -1.000000e+00, double 1.000000e+00\l  %305 = tail call double @llvm.experimental.constrained.fsub.f64(double %297,\l... double %299, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %306 = tail call double @llvm.experimental.constrained.fmul.f64(double %297,\l... double %284, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %307 = tail call double @llvm.experimental.constrained.fadd.f64(double %305,\l... double %306, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %308 = tail call double @llvm.experimental.constrained.fadd.f64(double %304,\l... double %299, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %309 = tail call double @llvm.experimental.constrained.fsub.f64(double %304,\l... double %308, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %310 = tail call double @llvm.experimental.constrained.fadd.f64(double %309,\l... double %299, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %311 = tail call double @llvm.experimental.constrained.fadd.f64(double %310,\l... double %307, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %312 = tail call double @llvm.experimental.constrained.fadd.f64(double %308,\l... double %311, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %313 = tail call double @llvm.experimental.constrained.fsub.f64(double %312,\l... double %304, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %314 = tail call i1 @llvm.experimental.constrained.fcmp.f64(double %313,\l... double 0.000000e+00, metadata !oeq, metadata !fpexcept.ignore) #40\l  %315 = and i64 %296, -9223372036854775808\l  %316 = bitcast i64 %315 to double\l  %317 = select i1 %314, double %316, double %313\l  %318 = bitcast double* %4 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %318)\l  store volatile double 0x10000000000000, double* %4, align 8, !tbaa !1635\l  %319 = load volatile double, double* %4, align 8, !tbaa !1635\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %318)\l  %320 = tail call double @llvm.experimental.constrained.fmul.f64(double %319,\l... double 0x10000000000000, metadata !round.dynamic, metadata\l... !fpexcept.ignore) #40\l  %321 = bitcast double* %5 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %321)\l  store volatile double %320, double* %5, align 8, !tbaa !1635\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %321)\l  br label %322\l}"];
	Node0x1888a10 -> Node0x1888a60;
	Node0x1888a60 [shape=record,label="{%322:\l322:                                              \l  %323 = phi double [ %317, %302 ], [ %299, %295 ]\l  %324 = tail call double @llvm.experimental.constrained.fmul.f64(double\l... 0x10000000000000, double %323, metadata !round.dynamic, metadata\l... !fpexcept.ignore) #40\l  br label %329\l}"];
	Node0x1888a60 -> Node0x1888b00;
	Node0x1888ab0 [shape=record,label="{%325:\l325:                                              \l  %326 = bitcast i64 %269 to double\l  %327 = tail call double @llvm.experimental.constrained.fmul.f64(double %326,\l... double %284, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %328 = tail call double @llvm.experimental.constrained.fadd.f64(double %326,\l... double %327, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  br label %329\l}"];
	Node0x1888ab0 -> Node0x1888b00;
	Node0x1888b00 [shape=record,label="{%329:\l329:                                              \l  %330 = phi double [ %42, %41 ], [ %53, %52 ], [ %110, %109 ], [\l... 1.000000e+00, %26 ], [ 1.000000e+00, %43 ], [ 0.000000e+00, %45 ], [ %87, %83\l... ], [ %81, %80 ], [ 1.000000e+00, %115 ], [ %122, %121 ], [ %124, %123 ], [\l... %130, %129 ], [ %132, %131 ], [ %234, %230 ], [ %240, %239 ], [ %242, %241 ],\l... [ %328, %325 ], [ %294, %289 ], [ %324, %322 ]\l  ret double %330\l}"];
}
