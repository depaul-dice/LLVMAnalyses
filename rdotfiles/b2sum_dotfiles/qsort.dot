digraph "CFG for 'qsort' function" {
	label="CFG for 'qsort' function";

	Node0x19749b0 [shape=record,label="{%4:\l  %5 = alloca [96 x i64], align 16\l  %6 = alloca [2 x i64], align 16\l  %7 = bitcast [96 x i64]* %5 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 768, i8* nonnull %7) #40\l  %8 = mul i64 %2, %1\l  %9 = bitcast [2 x i64]* %6 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #40\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16\l... dereferenceable(16) %9, i8* nonnull align 16 dereferenceable(16) bitcast ([2\l... x i64]* @__const.qsort.p to i8*), i64 16, i1 false)\l  %10 = icmp eq i64 %8, 0\l  br i1 %10, label %156, label %11\l|{<s0>T|<s1>F}}"];
	Node0x19749b0:s0 -> Node0x19752d0;
	Node0x19749b0:s1 -> Node0x1974ab0;
	Node0x1974ab0 [shape=record,label="{%11:\l11:                                               \l  %12 = sub i64 0, %2\l  %13 = getelementptr inbounds [96 x i64], [96 x i64]* %5, i64 0, i64 1\l  store i64 %2, i64* %13, align 8, !tbaa !1632\l  %14 = getelementptr inbounds [96 x i64], [96 x i64]* %5, i64 0, i64 0\l  store i64 %2, i64* %14, align 16, !tbaa !1632\l  br label %15\l}"];
	Node0x1974ab0 -> Node0x1974b00;
	Node0x1974b00 [shape=record,label="{%15:\l15:                                               \l  %16 = phi i64 [ %2, %11 ], [ %20, %15 ]\l  %17 = phi i64 [ %2, %11 ], [ %16, %15 ]\l  %18 = phi i64 [ 2, %11 ], [ %23, %15 ]\l  %19 = add i64 %17, %2\l  %20 = add i64 %19, %16\l  %21 = getelementptr inbounds [96 x i64], [96 x i64]* %5, i64 0, i64 %18\l  store i64 %20, i64* %21, align 8, !tbaa !1632\l  %22 = icmp ult i64 %20, %8\l  %23 = add i64 %18, 1\l  br i1 %22, label %15, label %24\l|{<s0>T|<s1>F}}"];
	Node0x1974b00:s0 -> Node0x1974b00;
	Node0x1974b00:s1 -> Node0x1974b50;
	Node0x1974b50 [shape=record,label="{%24:\l24:                                               \l  %25 = getelementptr inbounds i8, i8* %0, i64 %8\l  %26 = getelementptr inbounds i8, i8* %25, i64 %12\l  %27 = icmp ugt i8* %26, %0\l  %28 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 0\l  br i1 %27, label %29, label %85\l|{<s0>T|<s1>F}}"];
	Node0x1974b50:s0 -> Node0x1974ba0;
	Node0x1974b50:s1 -> Node0x1974f60;
	Node0x1974ba0 [shape=record,label="{%29:\l29:                                               \l  %30 = ptrtoint i8* %26 to i64\l  %31 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 1\l  br label %32\l}"];
	Node0x1974ba0 -> Node0x1974bf0;
	Node0x1974bf0 [shape=record,label="{%32:\l32:                                               \l  %33 = phi i64 [ 0, %29 ], [ %80, %78 ]\l  %34 = phi i64 [ 1, %29 ], [ %82, %78 ]\l  %35 = phi i32 [ 1, %29 ], [ %81, %78 ]\l  %36 = phi i8* [ %0, %29 ], [ %83, %78 ]\l  %37 = and i64 %34, 3\l  %38 = icmp eq i64 %37, 3\l  br i1 %38, label %39, label %45\l|{<s0>T|<s1>F}}"];
	Node0x1974bf0:s0 -> Node0x1974c40;
	Node0x1974bf0:s1 -> Node0x1974c90;
	Node0x1974c40 [shape=record,label="{%39:\l39:                                               \l  call fastcc void @sift(i8* %36, i64 %2, i32 (i8*, i8*)* %3, i32 %35, i64*\l... nonnull %14) #41\l  %40 = lshr i64 %34, 2\l  %41 = shl i64 %33, 62\l  %42 = or i64 %41, %40\l  store i64 %42, i64* %28, align 16, !tbaa !1632\l  %43 = lshr i64 %33, 2\l  store i64 %43, i64* %31, align 8, !tbaa !1632\l  %44 = add nsw i32 %35, 2\l  br label %78\l}"];
	Node0x1974c40 -> Node0x1974f10;
	Node0x1974c90 [shape=record,label="{%45:\l45:                                               \l  %46 = add nsw i32 %35, -1\l  %47 = sext i32 %46 to i64\l  %48 = getelementptr inbounds [96 x i64], [96 x i64]* %5, i64 0, i64 %47\l  %49 = load i64, i64* %48, align 8, !tbaa !1632\l  %50 = ptrtoint i8* %36 to i64\l  %51 = sub i64 %30, %50\l  %52 = icmp ult i64 %49, %51\l  br i1 %52, label %54, label %53\l|{<s0>T|<s1>F}}"];
	Node0x1974c90:s0 -> Node0x1974d30;
	Node0x1974c90:s1 -> Node0x1974ce0;
	Node0x1974ce0 [shape=record,label="{%53:\l53:                                               \l  call fastcc void @trinkle(i8* %36, i64 %2, i32 (i8*, i8*)* %3, i64* nonnull\l... %28, i32 %35, i32 0, i64* nonnull %14) #41\l  br label %55\l}"];
	Node0x1974ce0 -> Node0x1974d80;
	Node0x1974d30 [shape=record,label="{%54:\l54:                                               \l  call fastcc void @sift(i8* %36, i64 %2, i32 (i8*, i8*)* %3, i32 %35, i64*\l... nonnull %14) #41\l  br label %55\l}"];
	Node0x1974d30 -> Node0x1974d80;
	Node0x1974d80 [shape=record,label="{%55:\l55:                                               \l  %56 = icmp eq i32 %35, 1\l  br i1 %56, label %57, label %62\l|{<s0>T|<s1>F}}"];
	Node0x1974d80:s0 -> Node0x1974dd0;
	Node0x1974d80:s1 -> Node0x1974e20;
	Node0x1974dd0 [shape=record,label="{%57:\l57:                                               \l  %58 = shl i64 %33, 1\l  %59 = lshr i64 %34, 63\l  %60 = or i64 %59, %58\l  store i64 %60, i64* %31, align 8, !tbaa !1632\l  %61 = shl i64 %34, 1\l  store i64 %61, i64* %28, align 16, !tbaa !1632\l  br label %78\l}"];
	Node0x1974dd0 -> Node0x1974f10;
	Node0x1974e20 [shape=record,label="{%62:\l62:                                               \l  %63 = icmp ugt i32 %46, 63\l  br i1 %63, label %64, label %67\l|{<s0>T|<s1>F}}"];
	Node0x1974e20:s0 -> Node0x1974e70;
	Node0x1974e20:s1 -> Node0x1974ec0;
	Node0x1974e70 [shape=record,label="{%64:\l64:                                               \l  %65 = add i32 %35, -65\l  store i64 %34, i64* %31, align 8, !tbaa !1632\l  store i64 0, i64* %28, align 16, !tbaa !1632\l  %66 = sext i32 %65 to i64\l  br label %67\l}"];
	Node0x1974e70 -> Node0x1974ec0;
	Node0x1974ec0 [shape=record,label="{%67:\l67:                                               \l  %68 = phi i64 [ %66, %64 ], [ %47, %62 ]\l  %69 = phi i64 [ 0, %64 ], [ %34, %62 ]\l  %70 = phi i64 [ %34, %64 ], [ %33, %62 ]\l  %71 = phi i32 [ %65, %64 ], [ %46, %62 ]\l  %72 = zext i32 %71 to i64\l  %73 = shl i64 %70, %72\l  %74 = sub nsw i64 64, %68\l  %75 = lshr i64 %69, %74\l  %76 = or i64 %75, %73\l  store i64 %76, i64* %31, align 8, !tbaa !1632\l  %77 = shl i64 %69, %72\l  store i64 %77, i64* %28, align 16, !tbaa !1632\l  br label %78\l}"];
	Node0x1974ec0 -> Node0x1974f10;
	Node0x1974f10 [shape=record,label="{%78:\l78:                                               \l  %79 = phi i64 [ %42, %39 ], [ %61, %57 ], [ %77, %67 ]\l  %80 = phi i64 [ %43, %39 ], [ %60, %57 ], [ %76, %67 ]\l  %81 = phi i32 [ %44, %39 ], [ 0, %57 ], [ 1, %67 ]\l  %82 = or i64 %79, 1\l  store i64 %82, i64* %28, align 16, !tbaa !1632\l  %83 = getelementptr inbounds i8, i8* %36, i64 %2\l  %84 = icmp ult i8* %83, %26\l  br i1 %84, label %32, label %85\l|{<s0>T|<s1>F}}"];
	Node0x1974f10:s0 -> Node0x1974bf0;
	Node0x1974f10:s1 -> Node0x1974f60;
	Node0x1974f60 [shape=record,label="{%85:\l85:                                               \l  %86 = phi i64 [ 0, %24 ], [ %80, %78 ]\l  %87 = phi i64 [ 1, %24 ], [ %82, %78 ]\l  %88 = phi i8* [ %0, %24 ], [ %83, %78 ]\l  %89 = phi i32 [ 1, %24 ], [ %81, %78 ]\l  call fastcc void @trinkle(i8* %88, i64 %2, i32 (i8*, i8*)* %3, i64* nonnull\l... %28, i32 %89, i32 0, i64* nonnull %14) #41\l  %90 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 1\l  br label %91\l}"];
	Node0x1974f60 -> Node0x1974fb0;
	Node0x1974fb0 [shape=record,label="{%91:\l91:                                               \l  %92 = phi i64 [ %86, %85 ], [ %152, %151 ]\l  %93 = phi i64 [ %87, %85 ], [ %153, %151 ]\l  %94 = phi i8* [ %88, %85 ], [ %155, %151 ]\l  %95 = phi i32 [ %89, %85 ], [ %154, %151 ]\l  %96 = icmp eq i32 %95, 1\l  %97 = icmp eq i64 %93, 1\l  %98 = and i1 %96, %97\l  br i1 %98, label %99, label %101\l|{<s0>T|<s1>F}}"];
	Node0x1974fb0:s0 -> Node0x1975000;
	Node0x1974fb0:s1 -> Node0x1975050;
	Node0x1975000 [shape=record,label="{%99:\l99:                                               \l  %100 = icmp eq i64 %92, 0\l  br i1 %100, label %156, label %103\l|{<s0>T|<s1>F}}"];
	Node0x1975000:s0 -> Node0x19752d0;
	Node0x1975000:s1 -> Node0x19750a0;
	Node0x1975050 [shape=record,label="{%101:\l101:                                              \l  %102 = icmp slt i32 %95, 2\l  br i1 %102, label %103, label %131\l|{<s0>T|<s1>F}}"];
	Node0x1975050:s0 -> Node0x19750a0;
	Node0x1975050:s1 -> Node0x1975230;
	Node0x19750a0 [shape=record,label="{%103:\l103:                                              \l  %104 = add i64 %93, -1\l  %105 = tail call i64 asm bsf $1,$0, =r,r,~\{dirflag\},~\{fpsr\},~\{flags\}(i64\l... %104) #42, !srcloc !1636\l  %106 = trunc i64 %105 to i32\l  %107 = icmp eq i32 %106, 0\l  br i1 %107, label %108, label %113\l|{<s0>T|<s1>F}}"];
	Node0x19750a0:s0 -> Node0x19750f0;
	Node0x19750a0:s1 -> Node0x1975140;
	Node0x19750f0 [shape=record,label="{%108:\l108:                                              \l  %109 = tail call i64 asm bsf $1,$0, =r,r,~\{dirflag\},~\{fpsr\},~\{flags\}(i64\l... %92) #42, !srcloc !1636\l  %110 = trunc i64 %109 to i32\l  %111 = add i32 %110, 64\l  %112 = icmp eq i32 %110, 0\l  br i1 %112, label %118, label %113\l|{<s0>T|<s1>F}}"];
	Node0x19750f0:s0 -> Node0x19751e0;
	Node0x19750f0:s1 -> Node0x1975140;
	Node0x1975140 [shape=record,label="{%113:\l113:                                              \l  %114 = phi i32 [ %111, %108 ], [ %106, %103 ]\l  %115 = icmp ugt i32 %114, 63\l  br i1 %115, label %116, label %118\l|{<s0>T|<s1>F}}"];
	Node0x1975140:s0 -> Node0x1975190;
	Node0x1975140:s1 -> Node0x19751e0;
	Node0x1975190 [shape=record,label="{%116:\l116:                                              \l  %117 = add i32 %114, -64\l  store i64 %92, i64* %28, align 16, !tbaa !1632\l  store i64 0, i64* %90, align 8, !tbaa !1632\l  br label %118\l}"];
	Node0x1975190 -> Node0x19751e0;
	Node0x19751e0 [shape=record,label="{%118:\l118:                                              \l  %119 = phi i32 [ %114, %116 ], [ %114, %113 ], [ 0, %108 ]\l  %120 = phi i64 [ 0, %116 ], [ %92, %113 ], [ %92, %108 ]\l  %121 = phi i64 [ %92, %116 ], [ %93, %113 ], [ %93, %108 ]\l  %122 = phi i32 [ %117, %116 ], [ %114, %113 ], [ 0, %108 ]\l  %123 = zext i32 %122 to i64\l  %124 = lshr i64 %121, %123\l  %125 = sext i32 %122 to i64\l  %126 = sub nsw i64 64, %125\l  %127 = shl i64 %120, %126\l  %128 = or i64 %127, %124\l  store i64 %128, i64* %28, align 16, !tbaa !1632\l  %129 = lshr i64 %120, %123\l  store i64 %129, i64* %90, align 8, !tbaa !1632\l  %130 = add nsw i32 %119, %95\l  br label %151\l}"];
	Node0x19751e0 -> Node0x1975280;
	Node0x1975230 [shape=record,label="{%131:\l131:                                              \l  %132 = shl i64 %92, 2\l  %133 = lshr i64 %93, 62\l  %134 = or i64 %132, %133\l  %135 = add nsw i32 %95, -2\l  %136 = shl i64 %93, 1\l  %137 = and i64 %136, 9223372036854775806\l  %138 = shl i64 %133, 63\l  %139 = or i64 %137, %138\l  %140 = xor i64 %139, 3\l  store i64 %140, i64* %28, align 16, !tbaa !1632\l  %141 = lshr i64 %134, 1\l  store i64 %141, i64* %90, align 8, !tbaa !1632\l  %142 = sext i32 %135 to i64\l  %143 = getelementptr inbounds [96 x i64], [96 x i64]* %5, i64 0, i64 %142\l  %144 = load i64, i64* %143, align 8, !tbaa !1632\l  %145 = sub i64 0, %144\l  %146 = getelementptr inbounds i8, i8* %94, i64 %12\l  %147 = getelementptr inbounds i8, i8* %146, i64 %145\l  %148 = add nsw i32 %95, -1\l  call fastcc void @trinkle(i8* %147, i64 %2, i32 (i8*, i8*)* %3, i64* nonnull\l... %28, i32 %148, i32 1, i64* nonnull %14) #41\l  store i64 %134, i64* %90, align 8, !tbaa !1632\l  %149 = shl i64 %140, 1\l  %150 = or i64 %149, 1\l  store i64 %150, i64* %28, align 16, !tbaa !1632\l  call fastcc void @trinkle(i8* %146, i64 %2, i32 (i8*, i8*)* %3, i64* nonnull\l... %28, i32 %135, i32 1, i64* nonnull %14) #41\l  br label %151\l}"];
	Node0x1975230 -> Node0x1975280;
	Node0x1975280 [shape=record,label="{%151:\l151:                                              \l  %152 = phi i64 [ %129, %118 ], [ %134, %131 ]\l  %153 = phi i64 [ %128, %118 ], [ %150, %131 ]\l  %154 = phi i32 [ %130, %118 ], [ %135, %131 ]\l  %155 = getelementptr inbounds i8, i8* %94, i64 %12\l  br label %91\l}"];
	Node0x1975280 -> Node0x1974fb0;
	Node0x19752d0 [shape=record,label="{%156:\l156:                                              \l  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #40\l  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %7) #40\l  ret void\l}"];
}
