digraph "CFG for 'yn' function" {
	label="CFG for 'yn' function";

	Node0x1bd5270 [shape=record,label="{%2:\l  %3 = bitcast double %1 to i64\l  %4 = lshr i64 %3, 32\l  %5 = trunc i64 %4 to i32\l  %6 = trunc i64 %3 to i32\l  %7 = and i32 %5, 2147483647\l  %8 = sub i32 0, %6\l  %9 = or i32 %6, %8\l  %10 = lshr i32 %9, 31\l  %11 = or i32 %7, %10\l  %12 = icmp ugt i32 %11, 2146435072\l  br i1 %12, label %96, label %13\l|{<s0>T|<s1>F}}"];
	Node0x1bd5270:s0 -> Node0x1bd5970;
	Node0x1bd5270:s1 -> Node0x1bd53d0;
	Node0x1bd53d0 [shape=record,label="{%13:\l13:                                               \l  %14 = icmp sgt i64 %3, -1\l  %15 = or i32 %7, %6\l  %16 = icmp eq i32 %15, 0\l  %17 = or i1 %14, %16\l  br i1 %17, label %21, label %18\l|{<s0>T|<s1>F}}"];
	Node0x1bd53d0:s0 -> Node0x1bd5470;
	Node0x1bd53d0:s1 -> Node0x1bd5420;
	Node0x1bd5420 [shape=record,label="{%18:\l18:                                               \l  %19 = tail call double @llvm.experimental.constrained.sitofp.f64.i32(i32 0,\l... metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %20 = tail call double @llvm.experimental.constrained.fdiv.f64(double %19,\l... double 0.000000e+00, metadata !round.dynamic, metadata !fpexcept.ignore)\l... #40\l  br label %96\l}"];
	Node0x1bd5420 -> Node0x1bd5970;
	Node0x1bd5470 [shape=record,label="{%21:\l21:                                               \l  %22 = icmp eq i32 %7, 2146435072\l  br i1 %22, label %96, label %23\l|{<s0>T|<s1>F}}"];
	Node0x1bd5470:s0 -> Node0x1bd5970;
	Node0x1bd5470:s1 -> Node0x1bd54c0;
	Node0x1bd54c0 [shape=record,label="{%23:\l23:                                               \l  %24 = icmp eq i32 %0, 0\l  br i1 %24, label %25, label %27\l|{<s0>T|<s1>F}}"];
	Node0x1bd54c0:s0 -> Node0x1bd5510;
	Node0x1bd54c0:s1 -> Node0x1bd5560;
	Node0x1bd5510 [shape=record,label="{%25:\l25:                                               \l  %26 = tail call double @y0(double %1) #41\l  br label %96\l}"];
	Node0x1bd5510 -> Node0x1bd5970;
	Node0x1bd5560 [shape=record,label="{%27:\l27:                                               \l  %28 = icmp slt i32 %0, 0\l  %29 = xor i32 %0, -1\l  %30 = and i32 %0, 1\l  %31 = add nsw i32 %0, -1\l  %32 = select i1 %28, i32 %30, i32 0\l  %33 = select i1 %28, i32 %29, i32 %31\l  %34 = icmp eq i32 %33, 0\l  br i1 %34, label %35, label %40\l|{<s0>T|<s1>F}}"];
	Node0x1bd5560:s0 -> Node0x1bd55b0;
	Node0x1bd5560:s1 -> Node0x1bd5600;
	Node0x1bd55b0 [shape=record,label="{%35:\l35:                                               \l  %36 = icmp eq i32 %32, 0\l  %37 = tail call double @y1(double %1) #41\l  %38 = fneg double %37\l  %39 = select i1 %36, double %37, double %38\l  br label %96\l}"];
	Node0x1bd55b0 -> Node0x1bd5970;
	Node0x1bd5600 [shape=record,label="{%40:\l40:                                               \l  %41 = icmp ugt i32 %7, 1389363199\l  br i1 %41, label %42, label %68\l|{<s0>T|<s1>F}}"];
	Node0x1bd5600:s0 -> Node0x1bd5650;
	Node0x1bd5600:s1 -> Node0x1bd5880;
	Node0x1bd5650 [shape=record,label="{%42:\l42:                                               \l  %43 = and i32 %33, 3\l  switch i32 %43, label %58 [\l    i32 0, label %44\l    i32 1, label %49\l    i32 2, label %54\l    i32 3, label %59\l  ]\l|{<s0>def|<s1>0|<s2>1|<s3>2|<s4>3}}"];
	Node0x1bd5650:s0 -> Node0x1bd5790;
	Node0x1bd5650:s1 -> Node0x1bd56a0;
	Node0x1bd5650:s2 -> Node0x1bd56f0;
	Node0x1bd5650:s3 -> Node0x1bd5740;
	Node0x1bd5650:s4 -> Node0x1bd57e0;
	Node0x1bd56a0 [shape=record,label="{%44:\l44:                                               \l  %45 = tail call double @sin(double %1) #41\l  %46 = fneg double %45\l  %47 = tail call double @cos(double %1) #41\l  %48 = tail call double @llvm.experimental.constrained.fsub.f64(double %46,\l... double %47, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  br label %63\l}"];
	Node0x1bd56a0 -> Node0x1bd5830;
	Node0x1bd56f0 [shape=record,label="{%49:\l49:                                               \l  %50 = tail call double @sin(double %1) #41\l  %51 = fneg double %50\l  %52 = tail call double @cos(double %1) #41\l  %53 = tail call double @llvm.experimental.constrained.fadd.f64(double %51,\l... double %52, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  br label %63\l}"];
	Node0x1bd56f0 -> Node0x1bd5830;
	Node0x1bd5740 [shape=record,label="{%54:\l54:                                               \l  %55 = tail call double @sin(double %1) #41\l  %56 = tail call double @cos(double %1) #41\l  %57 = tail call double @llvm.experimental.constrained.fadd.f64(double %55,\l... double %56, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  br label %63\l}"];
	Node0x1bd5740 -> Node0x1bd5830;
	Node0x1bd5790 [shape=record,label="{%58:\l58:                                               \l  unreachable\l}"];
	Node0x1bd57e0 [shape=record,label="{%59:\l59:                                               \l  %60 = tail call double @sin(double %1) #41\l  %61 = tail call double @cos(double %1) #41\l  %62 = tail call double @llvm.experimental.constrained.fsub.f64(double %60,\l... double %61, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  br label %63\l}"];
	Node0x1bd57e0 -> Node0x1bd5830;
	Node0x1bd5830 [shape=record,label="{%63:\l63:                                               \l  %64 = phi double [ %62, %59 ], [ %57, %54 ], [ %53, %49 ], [ %48, %44 ]\l  %65 = tail call double @llvm.experimental.constrained.fmul.f64(double\l... 0x3FE20DD750429B6D, double %64, metadata !round.dynamic, metadata\l... !fpexcept.ignore) #40\l  %66 = tail call double @sqrt(double %1) #41\l  %67 = tail call double @llvm.experimental.constrained.fdiv.f64(double %65,\l... double %66, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  br label %91\l}"];
	Node0x1bd5830 -> Node0x1bd5920;
	Node0x1bd5880 [shape=record,label="{%68:\l68:                                               \l  %69 = tail call double @y0(double %1) #41\l  %70 = tail call double @y1(double %1) #41\l  %71 = bitcast double %70 to i64\l  %72 = icmp sgt i32 %33, 0\l  %73 = and i64 %71, -4294967296\l  %74 = icmp ne i64 %73, -4503599627370496\l  %75 = and i1 %72, %74\l  br i1 %75, label %76, label %91\l|{<s0>T|<s1>F}}"];
	Node0x1bd5880:s0 -> Node0x1bd58d0;
	Node0x1bd5880:s1 -> Node0x1bd5920;
	Node0x1bd58d0 [shape=record,label="{%76:\l76:                                               \l  %77 = phi double [ %85, %76 ], [ %70, %68 ]\l  %78 = phi double [ %77, %76 ], [ %69, %68 ]\l  %79 = phi i32 [ %80, %76 ], [ 0, %68 ]\l  %80 = add nuw nsw i32 %79, 1\l  %81 = tail call double @llvm.experimental.constrained.sitofp.f64.i32(i32\l... %80, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %82 = tail call double @llvm.experimental.constrained.fmul.f64(double\l... 2.000000e+00, double %81, metadata !round.dynamic, metadata\l... !fpexcept.ignore) #40\l  %83 = tail call double @llvm.experimental.constrained.fdiv.f64(double %82,\l... double %1, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %84 = tail call double @llvm.experimental.constrained.fmul.f64(double %83,\l... double %77, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %85 = tail call double @llvm.experimental.constrained.fsub.f64(double %84,\l... double %78, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %86 = bitcast double %85 to i64\l  %87 = icmp slt i32 %80, %33\l  %88 = and i64 %86, -4294967296\l  %89 = icmp ne i64 %88, -4503599627370496\l  %90 = and i1 %87, %89\l  br i1 %90, label %76, label %91\l|{<s0>T|<s1>F}}"];
	Node0x1bd58d0:s0 -> Node0x1bd58d0;
	Node0x1bd58d0:s1 -> Node0x1bd5920;
	Node0x1bd5920 [shape=record,label="{%91:\l91:                                               \l  %92 = phi double [ %67, %63 ], [ %70, %68 ], [ %85, %76 ]\l  %93 = icmp eq i32 %32, 0\l  %94 = fneg double %92\l  %95 = select i1 %93, double %92, double %94\l  br label %96\l}"];
	Node0x1bd5920 -> Node0x1bd5970;
	Node0x1bd5970 [shape=record,label="{%96:\l96:                                               \l  %97 = phi double [ %20, %18 ], [ %26, %25 ], [ %39, %35 ], [ %95, %91 ], [\l... %1, %2 ], [ 0.000000e+00, %21 ]\l  ret double %97\l}"];
}
