digraph "CFG for 'trunc' function" {
	label="CFG for 'trunc' function";

	Node0x1fc34a0 [shape=record,label="{%1:\l  %2 = alloca double, align 8\l  %3 = bitcast double %0 to i64\l  %4 = lshr i64 %3, 52\l  %5 = trunc i64 %4 to i32\l  %6 = and i32 %5, 2047\l  %7 = icmp ugt i32 %6, 1074\l  br i1 %7, label %23, label %8\l|{<s0>T|<s1>F}}"];
	Node0x1fc34a0:s0 -> Node0x1fc3590;
	Node0x1fc34a0:s1 -> Node0x1fc34f0;
	Node0x1fc34f0 [shape=record,label="{%8:\l8:                                                \l  %9 = add nsw i32 %6, -1011\l  %10 = icmp ult i32 %6, 1023\l  %11 = select i1 %10, i32 1, i32 %9\l  %12 = zext i32 %11 to i64\l  %13 = lshr i64 -1, %12\l  %14 = and i64 %13, %3\l  %15 = icmp eq i64 %14, 0\l  br i1 %15, label %23, label %16\l|{<s0>T|<s1>F}}"];
	Node0x1fc34f0:s0 -> Node0x1fc3590;
	Node0x1fc34f0:s1 -> Node0x1fc3540;
	Node0x1fc3540 [shape=record,label="{%16:\l16:                                               \l  %17 = tail call double @llvm.experimental.constrained.fpext.f64.f32(float\l... 0x4770000000000000, metadata !fpexcept.ignore) #40\l  %18 = tail call double @llvm.experimental.constrained.fadd.f64(double %0,\l... double %17, metadata !round.dynamic, metadata !fpexcept.ignore) #40\l  %19 = bitcast double* %2 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)\l  store volatile double %18, double* %2, align 8, !tbaa !1632\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)\l  %20 = xor i64 %13, -1\l  %21 = and i64 %20, %3\l  %22 = bitcast i64 %21 to double\l  br label %23\l}"];
	Node0x1fc3540 -> Node0x1fc3590;
	Node0x1fc3590 [shape=record,label="{%23:\l23:                                               \l  %24 = phi double [ %22, %16 ], [ %0, %1 ], [ %0, %8 ]\l  ret double %24\l}"];
}
